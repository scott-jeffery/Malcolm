# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.

filter {

  # Map enriched fields to ECS where possible (see https://github.com/idaholab/Malcolm/issues/16)

  # ECS - various -> related.hosts (hostnames, domain names, workstation names, aliases, etc.)
  if ([smb][host]) {                   mutate { id => "mutate_merge_ecs_related_hosts_smb_host"
                                                merge => { "[related][hosts]" => "[smb][host]" } } }
  if ([http][host]) {                  mutate { id => "mutate_merge_ecs_related_hosts_http_host"
                                                merge => { "[related][hosts]" => "[http][host]" } } }
  if ([tls][client][server_name]) {    mutate { id => "mutate_merge_ecs_related_hosts_tls_client_server_name"
                                                merge => { "[related][hosts]" => "[tls][client][server_name]" } } }
  if ([client][domain]) {              mutate { id => "mutate_merge_ecs_related_hosts_client_domain"
                                                merge => { "[related][hosts]" => "[client][domain]" } } }
  if ([server][domain]) {              mutate { id => "mutate_merge_ecs_related_hosts_server_domain"
                                                merge => { "[related][hosts]" => "[server][domain]" } } }

  if ([ipProtocol]) {
    # ECS - ipProtocol -> network.iana_number
    mutate { id => "mutate_add_field_ecs_network_iana_number"
             add_field => { "[network][iana_number]" => "%{[ipProtocol]}" } }
  }

  # ECS - various -> related.ip (all IP-type fields get rolled up into related.ip)
  if ([source][ip]) {               mutate { id => "mutate_merge_field_related_ip_source_ip"
                                             merge => { "[related][ip]" => "[source][ip]" } } }
  if ([destination][ip]) {          mutate { id => "mutate_merge_field_related_ip_destination_ip"
                                             merge => { "[related][ip]" => "[destination][ip]" } } }
  if ([destination][geo][ip]) {     mutate { id => "mutate_merge_field_related_ip_destination_geo_ip"
                                             merge => { "[related][ip]" => "[destination][geo][ip]" } } }
  if ([source][geo][ip]) {          mutate { id => "mutate_merge_field_related_ip_source_geo_ip"
                                             merge => { "[related][ip]" => "[source][geo][ip]" } } }
  if ([source][nat][ip]) {          mutate { id => "mutate_merge_field_related_ip_source_nat_ip"
                                             merge => { "[related][ip]" => "[source][nat][ip]" } } }

  # ECS - various -> related.oui (all OUI-lookup fields get rolled up into related.oui)
  if ([source][oui]) {               mutate { id => "mutate_merge_field_related_oui_source_oui"
                                             merge => { "[related][oui]" => "[source][oui]" } } }
  if ([destination][oui]) {          mutate { id => "mutate_merge_field_related_oui_destination_oui"
                                             merge => { "[related][oui]" => "[destination][oui]" } } }

  # ECS - various -> related.mac (all MAC address fields get rolled up into related.mac)
  if ([source][mac]) {               mutate { id => "mutate_merge_field_related_mac_source_mac"
                                              merge => { "[related][mac]" => "[source][mac]" } } }
  if ([destination][mac]) {          mutate { id => "mutate_merge_field_related_mac_destination_mac"
                                              merge => { "[related][mac]" => "[destination][mac]" } } }

  # Email - email.src/email.dst (Arkime) to ECS email.from.address/email.to.address
  if ([email][src]) {          mutate { id => "mutate_merge_field_ecs_email_src"
                                              merge => { "[email][from][address]" => "[email][src]" } } }
  if ([email][dst]) {          mutate { id => "mutate_merge_field_ecs_email_dst"
                                              merge => { "[email][to][address]" => "[email][dst]" } } }

  # ecs.version is required in all events - https://www.elastic.co/guide/en/ecs/current/ecs-ecs.html
  if (![ecs][version]) { mutate { id => "mutate_add_field_ecs_version"
                                  add_field => { "[ecs][version]" => "1.6.0" } } }

  if ([firstPacket]) and (![event][start]) {
    # ECS - firstPacket -> event.start
    mutate { id => "mutate_add_field_ecs_event_start"
             add_field => { "[event][start]" => "%{[firstPacket]}" } }
  }

  if ([lastPacket]) and (![event][end]) {
    # ECS - lastPacket -> event.end
    mutate { id => "mutate_add_field_ecs_event_end"
             add_field => { "[event][end]" => "%{[lastPacket]}" } }
  }

  # event.ingested
  if (![event][ingested]) {
    ruby {
      id => "ruby_event_ingested_now"
      init => "require 'time'"
      code => "event.set('[event][ingested]', Time.now.to_f)"
    }
    date {
      id => "date_event_ingested_conv"
      match => [ "[event][ingested]", "UNIX" ]
      target => "[event][ingested]"
    }
  }


  # ECS - file.path from file.directory and file.name, if either of those are present and path is not already populated
  if (![file][path]) and ([file][directory]) {
    if ([file][name]) {
      mutate { id => "mutate_add_field_ecs_path_from_dir_and_name"
               add_field => { "[file][path]" => "%{[file][directory]}/%{[file][name]}" } }
    } else {
      mutate { id => "mutate_add_field_ecs_path_from_dir_only"
               add_field => { "[file][path]" => "%{[file][directory]}/" } }
    }
  }

  # ECS - file.directory and file.name from file.path, if file.path is present and the other two aren't
  if ([file][path]) and (![file][directory]) and (![file][name]) {
    ruby {
      id => "ruby_ecs_file_path_normalize_to_directory_and_name"
      code => "
        if filePath = event.get('[file][path]') then
          fileDir = Array.new unless (fileDir = event.get('[file][directory]'))
          fileName = Array.new unless (fileName = event.get('[file][name]'))
          Array(filePath).each do |val|
            if parts = val.match(/(.*?)([^\\\/]+)?$/) then
              preLastSep, postLastSep = parts.captures
              fileDir << preLastSep.delete_suffix('\\').delete_suffix('/') unless preLastSep.nil? or (preLastSep.length <= 1)
              fileName << postLastSep unless postLastSep.nil? or (postLastSep.length == 0)
            end
          end
          event.set('[file][directory]', fileDir.uniq) unless fileDir.nil? or (fileDir.length == 0)
          event.set('[file][name]', fileName.uniq) unless fileName.nil? or (fileName.length == 0)
        end"
    }
  }

  # ECS - event.category based on event.dataset (https://www.elastic.co/guide/en/ecs/current/ecs-allowed-values-event-category.html)
  translate {
    id => "translate_ecs_event_category"
    source => "[event][dataset]"
    target => "[event][category]"
    dictionary_path => "/etc/zeek_log_ecs_categories.yaml"
  }

  # event.provider
  if (![event][provider]) { mutate { id => "mutate_add_field_event_provider_enrichment"
                                     add_field => { "[event][provider]" => "malcolm" } } }

}
