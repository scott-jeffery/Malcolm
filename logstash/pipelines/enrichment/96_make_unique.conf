# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.

# take array fields that are already generic (i.e., ECS or Arkime) and deduplicate them.
# there is also a little bit of light normalization that happens here
# at the same time for performance's sake

filter {

  # all hashed values #########################################################
  if ([related][hash]) {
    ruby {
      id => "ruby_related_hash_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][hash]"
      }
    }
  }

  # all host identifiers #########################################################
  if ([related][hosts]) {
    ruby {
      id => "ruby_related_hosts_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][hosts]"
      }
    }
  }

  # all IP addresses ##########################################################
  if ([related][ip]) {
    ruby {
      id => "ruby_related_ip_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][ip]"
      }
    }
  }

  # all MAC addresses #########################################################
  if ([related][mac]) {
    ruby {
      id => "ruby_related_mac_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][mac]"
      }
    }
  }

  # all oui lookups ##########################################################
  if ([related][oui]) {
    ruby {
      id => "ruby_related_oui_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][oui]"
      }
    }
  }

  # all netbox lookups ########################################################
  if ([related][site]) {
    ruby {
      id => "ruby_related_site_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][site]"
      }
    }
  }
  if ([related][role]) {
    ruby {
      id => "ruby_related_role_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][role]"
      }
    }
  }
  if ([related][manufacturer]) {
    ruby {
      id => "ruby_related_manufacturer_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][manufacturer]"
      }
    }
  }
  if ([related][device_type]) {
    ruby {
      id => "ruby_related_device_type_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][device_type]"
      }
    }
  }
  if ([related][device_id]) {
    ruby {
      id => "ruby_related_device_id_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][device_id]"
      }
    }
  }
  if ([related][device_name]) {
    ruby {
      id => "ruby_related_device_name_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][device_name]"
      }
    }
  }

  # all users #################################################################
  if ([related][user]) {
    ruby {
      id => "ruby_related_user_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[related][user]"
      }
    }
  }

  # network protocol ##########################################################
  if ([network][protocol]) {

    if ([event][provider] == "suricata") {
      # - suricata puts a "failed" protocol on some events and I don't care for it
      # - normalize service so it matches what we're getting from zeek
      ruby {
        id => "ruby_network_protocol_uniq_suricata"
        path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
        script_params => {
          "field" => "[network][protocol]"
          "prune" => "failed"
          "translate" => { "dcerpc" => "dce_rpc"
                           "ftp-data" => "ftp"
                           "krb5" => "krb" }
        }
      }

    } else if ([event][provider] == "zeek") {
      # - do some service normalization for zeek while we're at it
      ruby {
        id => "ruby_network_protocol_uniq_zeek"
        path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
        script_params => {
          "field" => "[network][protocol]"
          "translate" => { "tftp_data" => "tftp"
                           "ftp_data" => "ftp"
                           "ipsec_ike" => "ipsec"
                           "rdpeudp" => "rdp"
                           "irc_data" => "irc" }
        }
      }

    } else {
      # - just dedupe network.protocol
      ruby {
        id => "ruby_network_protocol_uniq"
        path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
        script_params => {
          "field" => "[network][protocol]"
        }
      }
    }

    # ECS - network.protocol -> network.application
    # TODO: what's the difference? https://www.elastic.co/guide/en/ecs/current/ecs-network.html
    if (![network][application]) {
      mutate { id => "mutate_add_field_ecs_network_application"
               add_field => { "[network][application]" => "%{[network][protocol]}" } }
    }
  }

  # network protocol number #################################################
  if ([network][iana_number]) {
    ruby {
      id => "ruby_network_iana_number_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[network][iana_number]"
      }
    }
  }

  # network protocol (service) version ########################################
  if ([network][protocol_version]) {
    ruby {
      id => "ruby_network_protocol_version_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[network][protocol_version]"
      }
    }
  }

  # network protocol number #################################################
  if ([network][name]) {
    ruby {
      id => "ruby_network_name_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[network][name]"
      }
    }
  }

  # action and result #########################################################
  if ([event][action]) {
    ruby {
      id => "ruby_event_action_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[event][action]"
      }
    }
  }

  if ([event][result]) {
    ruby {
      id => "ruby_event_result_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[event][result]"
      }
    }
  }

  # event ID(s) ###############################################################
  if ([event][id]) {
    ruby {
      id => "ruby_event_id_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[event][id]"
      }
    }
  }

  # file mime type ############################################################
  if ([file][mime_type]) {
    ruby {
      id => "ruby_file_mime_type_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[file][mime_type]"
      }
    }
  }

  # file path #################################################################
  if ([file][path]) {
    ruby {
      id => "ruby_event_file_path_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[file][path]"
      }
    }
  }

  # http ######################################################################
  if ([http][bodyMagic]) {
    ruby {
      id => "ruby_http_bodyMagic_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[http][bodyMagic]"
      }
    }
  }

  # email ######################################################################
  if ([email][src]) {
    ruby {
      id => "ruby_email_src_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[email][src]"
      }
    }
  }

  if ([email][dst]) {
    ruby {
      id => "ruby_email_dst_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[email][dst]"
      }
    }
  }

  if ([email][from][address]) {
    ruby {
      id => "ruby_email_from_address_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[email][from][address]"
      }
    }
  }

  if ([email][to][address]) {
    ruby {
      id => "ruby_email_to_address_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[email][to][address]"
      }
    }
  }

  # smb ########################################################################
  if ([smb][filename]) {
    ruby {
      id => "ruby_smb_files_filename_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[smb][filename]"
      }
    }
  }
  if ([smb][host]) {
    ruby {
      id => "ruby_smb_files_host_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[smb][host]"
      }
    }
  }
  if ([smb][share]) {
    ruby {
      id => "ruby_smb_files_share_uniq"
      path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
      script_params => {
        "field" => "[smb][share]"
      }
    }
  }

  # deduplicate tags ##########################################################
  ruby {
    id => "ruby_tags_deduplicate"
    path => "/usr/share/logstash/malcolm-ruby/make_unique_array.rb"
    script_params => {
      "field" => "tags"
    }
  }

}
