filter {

  ######## MAC address OUI (manufacturer) lookup #################################################

  # if OUI lookup is requested, enable it
  mutate {
    id => "mutate_add_field_env_logstash_oui_lookup"
    add_field => { "[@metadata][ENV_LOGSTASH_OUI_LOOKUP]" => "${LOGSTASH_OUI_LOOKUP:false}" }
  }
  if ([@metadata][ENV_LOGSTASH_OUI_LOOKUP] == "true") {

    # source.mac/destination.mac are arrays at this point, as Arkime expects them to be

    if ([source][mac]) {

      # attempt lookup of source.mac oui
      ruby {
        id => "mac_lookup_src"
        path => "/usr/share/logstash/malcolm-ruby/mac_lookup.rb"
        script_params => {
          "source" => "[source][mac]"
          "map_path" => "/etc/vendor_macs.yaml"
          "target" => "[source][oui]"
        }
      }

      # also look up mac in ICS vendors list
      ruby {
        id => "ics_mac_lookup_src"
        path => "/usr/share/logstash/malcolm-ruby/mac_lookup.rb"
        script_params => {
          "source" => "[source][mac]"
          "map_path" => "/etc/ics_macs.yaml"
          "target" => "[@metadata][ics_guess_oui_src]"
        }
      }
      if ([@metadata][ics_guess_oui_src]) {
        if (!("ics" in [tags])) {
          mutate { id => "mutate_add_tag_ics_best_guess_from_oui_src"
                   add_tag => [ "ics_best_guess" ] }
        }
        if (![zeek][bestguess][category]) {
          mutate {
            id => "mutate_add_fields_zeek_bestguess_category_from_ics_guess_oui_src"
            add_field => { "[zeek][bestguess][category]" => "%{[@metadata][ics_guess_oui_src]}" }
          }
        }
        if (![source][oui]) {
          mutate {
            id => "mutate_add_fields_source_oui_from_ics_guess_oui_src"
            add_field => { "[source][oui]" => "%{[@metadata][ics_guess_oui_src]}" }
          }
        }
      }

    } # end if [source][mac]

    if ([destination][mac]) {

      # attempt lookup of destination.mac oui
      ruby {
        id => "mac_lookup_dst"
        path => "/usr/share/logstash/malcolm-ruby/mac_lookup.rb"
        script_params => {
          "source" => "[destination][mac]"
          "map_path" => "/etc/vendor_macs.yaml"
          "target" => "[destination][oui]"
        }
      }

      # also look up mac in ICS vendors list
      ruby {
        id => "ics_mac_lookup_dst"
        path => "/usr/share/logstash/malcolm-ruby/mac_lookup.rb"
        script_params => {
          "source" => "[destination][mac]"
          "map_path" => "/etc/ics_macs.yaml"
          "target" => "[@metadata][ics_guess_oui_dst]"
        }
      }
      if ([@metadata][ics_guess_oui_dst]) {
        if (!("ics" in [tags])) {
          mutate { id => "mutate_add_tag_ics_best_guess_from_oui_dst"
                   add_tag => [ "ics_best_guess" ] }
        }
        if (![zeek][bestguess][category]) {
          mutate {
            id => "mutate_add_fields_zeek_bestguess_category_from_ics_guess_oui_dst"
            add_field => { "[zeek][bestguess][category]" => "%{[@metadata][ics_guess_oui_dst]}" }
          }
        }
        if (![destination][oui]) {
          mutate {
            id => "mutate_add_fields_destination_oui_from_ics_guess_oui_dst"
            add_field => { "[destination][oui]" => "%{[@metadata][ics_guess_oui_dst]}" }
          }
        }
      }

    } # end if [destination][mac]

  } # end if ENV_LOGSTASH_OUI_LOOKUP
  ################################################################################################

  ######## IP address class tagging, GeoIP/ASN lookups, and reverse DNS ###########################
  if ([source][ip]) {
    cidr {
      id      => "cidr_add_tag_internal_source"
      add_tag => [ "internal_source" ]
      address => [ "%{[source][ip]}" ]
      network => [ "0.0.0.0/8", "10.0.0.0/8", "100.64.0.0/10", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.2.0/24",
                   "192.88.99.0/24", "192.168.0.0/16", "198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "224.0.0.0/4", "240.0.0.0/4",
                   "255.255.255.255/32", "::/0", "::/128", "::1/128", "fc00::/7", "fe80::/10", "ff00::/8"]
    }
    if (!("internal_source" in [tags])) {
      mutate { id => "mutate_add_tag_external_source"
               add_tag => [ "external_source" ] }
      # map source.ip to GEO countries
      geoip {
        id => "geoip_srcIp_geo"
        source => "[source][ip]"
        target => "[source][geo]"
      }
      geoip {
        id => "geoip_srcIp_asn"
        default_database_type => "ASN"
        source => "[source][ip]"
        target => "[@metadata][orig_asn]"
      }
      if ([source][geo] and [source][geo][country_code2]) {
        mutate { id => "mutate_add_field_srcGEO"
                 add_field => { "[source][geo][country_iso_code]" => "%{[source][geo][country_code2]}" } }
      }
      if ([@metadata][orig_asn] and [@metadata][orig_asn][as_org] and [@metadata][orig_asn][asn]) {
        mutate { id => "mutate_add_field_srcASN"
                 add_field => { "[source][as][full]" => "AS%{[@metadata][orig_asn][asn]} %{[@metadata][orig_asn][as_org]}" } }
      }
      mutate { id => "mutate_add_field_external_source_segment_public"
               add_field => { "[source][segment][name]" => "public" } }

      # if reverse DNS for public IP addresses is enabled (via environment variable) do it
      mutate {
        add_field => { "[@metadata][ENV_LOGSTASH_REVERSE_DNS]" => "${LOGSTASH_REVERSE_DNS:false}" }
      }
      if ([@metadata][ENV_LOGSTASH_REVERSE_DNS] == "true") {
        mutate {
          id => "mutate_add_field_srcip_for_dns"
          add_field => {
            "[source][ip_reverse_dns]" => "%{[source][ip]}"
          }
        }
        dns {
          id => "dns_source_ip_reverse_dns"
          reverse => [ "[source][ip_reverse_dns]" ]
          action => "replace"
          hit_cache_size => 8000
          hit_cache_ttl => 300
          failed_cache_size => 8000
          failed_cache_ttl => 60
        }
        if ([source][ip] == [source][ip_reverse_dns]) {
          mutate {
            id => "mutate_remove_field_source_ip_reverse_dns"
            remove_field => [ "[source][ip_reverse_dns]" ]
          }
        }
      }
    }
    cidr {
      id      => "cidr_detect_network_type_ipv4_source"
      add_field => { "[network][type]" => "ipv4" }
      address => [ "%{[source][ip]}" ]
      network => [ "0.0.0.0/0" ]
    }
    if (![network][type]) {
      mutate { id => "mutate_add_network_type_ipv6_source"
               add_field => { "[network][type]" => "ipv6" } }
    }
  } # if ([source][ip])

  if ([destination][ip]) {
    cidr {
      id      => "cidr_add_tag_internal_destination"
      add_tag => [ "internal_destination" ]
      address => [ "%{[destination][ip]}" ]
      network => [ "0.0.0.0/8", "10.0.0.0/8", "100.64.0.0/10", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.2.0/24",
                   "192.88.99.0/24", "192.168.0.0/16", "198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "224.0.0.0/4", "240.0.0.0/4",
                   "255.255.255.255/32", "::/0", "::/128", "::1/128", "fc00::/7", "fe80::/10", "ff00::/8"]
    }
    if (!("internal_destination" in [tags])) {
      mutate { id => "mutate_add_tag_external_destination"
               add_tag => [ "external_destination" ] }
      # map destination.ip to GEO countries
      geoip {
        id => "geoip_dstIp_geo"
        source => "[destination][ip]"
        target => "[destination][geo]"
      }
      geoip {
        id => "geoip_dstIp_asn"
        default_database_type => "ASN"
        source => "[destination][ip]"
        target => "[@metadata][resp_asn]"
      }
      if ([destination][geo] and [destination][geo][country_code2]) {
        mutate { id => "mutate_add_field_dstGEO"
                 add_field => { "[destination][geo][country_iso_code]" => "%{[destination][geo][country_code2]}" } }
      }
      if ([@metadata][resp_asn] and [@metadata][resp_asn][as_org] and [@metadata][resp_asn][asn]) {
        mutate { id => "mutate_add_field_dstASN"
                 add_field => { "[destination][as][full]" => "AS%{[@metadata][resp_asn][asn]} %{[@metadata][resp_asn][as_org]}" } }
      }
      mutate { id => "mutate_add_field_external_destination_segment_public"
               add_field => { "[destination][segment][name]" => "public" } }

      # if reverse DNS for public IP addresses is enabled (via environment variable) do it
      if (![@metadata][ENV_LOGSTASH_REVERSE_DNS]) {
        mutate {
          add_field => { "[@metadata][ENV_LOGSTASH_REVERSE_DNS]" => "${LOGSTASH_REVERSE_DNS:false}" }
        }
      }
      if ([@metadata][ENV_LOGSTASH_REVERSE_DNS] == "true") {
        mutate {
          id => "mutate_add_field_dstip_for_dns"
          add_field => {
            "[destination][ip_reverse_dns]" => "%{[destination][ip]}"
          }
        }
        dns {
          id => "dns_destination_ip_reverse_dns"
          reverse => [ "[destination][ip_reverse_dns]" ]
          action => "replace"
          hit_cache_size => 8000
          hit_cache_ttl => 300
          failed_cache_size => 8000
          failed_cache_ttl => 60
        }
        if ([destination][ip] == [destination][ip_reverse_dns]) {
          mutate {
            id => "mutate_remove_field_destination_ip_reverse_dns"
            remove_field => [ "[destination][ip_reverse_dns]" ]
          }
        }
      }
    }
    if (![network][type]) {
      cidr {
        id      => "cidr_detect_network_type_ipv4_dest"
        add_field => { "[network][type]" => "ipv4" }
        address => [ "%{[destination][ip]}" ]
        network => [ "0.0.0.0/0" ]
      }
      if (![network][type]) {
        mutate { id => "mutate_add_network_type_ipv6_dest"
                 add_field => { "[network][type]" => "ipv6" } }
      }
    }
  } # if ([destination][ip])

  # network.direction (from tags assigned above)
  if ("internal_source" in [tags]) and ("internal_destination" in [tags]) {
    mutate { id => "mutate_add_field_metadata_network_direction_internal"
             add_field => { "[network][direction]" => "internal" } }
  } else if ("internal_source" in [tags]) and ("external_destination" in [tags]) {
    mutate { id => "mutate_add_field_metadata_network_direction_outbound"
             add_field => { "[network][direction]" => "outbound" } }
  } else if ("external_source" in [tags]) and ("internal_destination" in [tags]) {
    mutate { id => "mutate_add_field_metadata_network_direction_inbound"
             add_field => { "[network][direction]" => "inbound" } }
  } else if ("external_source" in [tags]) and ("external_destination" in [tags]) {
    mutate { id => "mutate_add_field_metadata_network_direction_external"
             add_field => { "[network][direction]" => "external" } }
  } else if ("external_source" in [tags]) or ("external_destination" in [tags]) {
    mutate { id => "mutate_add_field_metadata_network_direction_external_one_sided"
             add_field => { "[network][direction]" => "external" } }
  } else if ("internal_source" in [tags]) or ("internal_destination" in [tags]) {
    mutate { id => "mutate_add_field_metadata_network_direction_internal_one_sided"
             add_field => { "[network][direction]" => "internal" } }
  }
  mutate { id => "mutate_enrichment_tags_remove_direction"
           remove_tag => [ "internal_source",
                           "internal_destination",
                           "external_source",
                           "external_destination" ] }

  if ([dns][host]) {
    # if requested, look up DNS queries using freq_server.py to get entropy scores
    ruby {
      id => "ruby_dns_freq_lookup"
      path => "/usr/share/logstash/malcolm-ruby/freq_lookup.rb"
      script_params => {
        "source" => "[dns][host]"
        "target_1" => "[event][freq_score_v1]"
        "target_2" => "[event][freq_score_v2]"
        "source_type" => "dns"
      }
    }

  } # end if dns.host

  if ([dns][ip]) and ([dns][ip][0]) {
    # if this is a DNS record with an IP, GeoIP it as well
    geoip {
      id => "geoip_dns_ip_asn"
      default_database_type => "ASN"
      source => "[dns][ip][0]"
      target => "[@metadata][dns_asn]"
    }
    if ([@metadata][dns_asn] and [@metadata][dns_asn][as_org] and [@metadata][dns_asn][asn]) {
      # this is stupid, the %{} doesn't seem to be liked by mutate.merge
      mutate { id => "mutate_add_field_dns_asn"
               add_field => { "[@metadata][asn_str]" => "AS%{[@metadata][dns_asn][asn]} %{[@metadata][dns_asn][as_org]}" } }
      mutate { id => "mutate_merge_dns_asn"
               merge => { "[dns][ASN]" => "[@metadata][asn_str]" } }
    }

    geoip {
      id => "geoip_dns_ip_geo"
      source => "[dns][ip][0]"
      target => "[@metadata][dns_geo]"
    }
    if ([@metadata][dns_geo] and [@metadata][dns_geo][country_code2]) {
      mutate { id => "mutate_merge_dns_geo"
               merge => { "[dns][GEO]" => "[@metadata][dns_geo][country_code2]" } }
    }
  } # end if dns.ip

  if ([radius]) {

    # if this is a Radius record with IP addresses, GeoIP them as well
    if ([radius][framedIp]) and ([radius][framedIp][0]) {
      geoip {
        id => "geoip_radius_framedIp_asn"
        default_database_type => "ASN"
        source => "[radius][framedIp][0]"
        target => "[@metadata][radius_asn]"
      }
      if ([@metadata][radius_asn] and [@metadata][radius_asn][as_org] and [@metadata][radius_asn][asn]) {
        # this is stupid, the %{} doesn't seem to be liked by mutate.merge
        mutate { id => "mutate_add_field_radius_asn"
                 add_field => { "[@metadata][asn_str]" => "AS%{[@metadata][radius_asn][asn]} %{[@metadata][radius_asn][as_org]}" } }
        mutate { id => "mutate_merge_radius_asn"
                 merge => { "[radius][framedASN]" => "[@metadata][asn_str]" } }
      }
      geoip {
        id => "geoip_radius_framedIp_geo"
        source => "[radius][framedIp][0]"
        target => "[@metadata][radius_geo]"
      }
      if ([@metadata][radius_geo] and [@metadata][radius_geo][country_code2]) {
        mutate { id => "mutate_merge_radius_geo"
                 merge => { "[radius][framedGEO]" => "[@metadata][radius_geo][country_code2]" } }
      }
    } # end if radius.framedIp

    if ([radius][endpointIp]) and ([radius][endpointIp][0]) {
      geoip {
        id => "geoip_radius_endpointIp_asn"
        default_database_type => "ASN"
        source => "[radius][endpointIp][0]"
        target => "[@metadata][radius_asn]"
      }
      if ([@metadata][radius_asn] and [@metadata][radius_asn][as_org] and [@metadata][radius_asn][asn]) {
        # this is stupid, the %{} doesn't seem to be liked by mutate.merge
        mutate { id => "mutate_add_field_radius_endpoint_asn"
                 add_field => { "[@metadata][asn_str]" => "AS%{[@metadata][radius_asn][asn]} %{[@metadata][radius_asn][as_org]}" } }
        mutate { id => "mutate_merge_radius_endpoint_asn"
                 merge => { "[radius][endpointASN]" => "[@metadata][asn_str]" } }
      }

      geoip {
        id => "geoip_radius_endpointIp_geo"
        source => "[radius][endpointIp][0]"
        target => "[@metadata][radius_geo]"
      }
      if ([@metadata][radius_geo] and [@metadata][radius_geo][country_code2]) {
        mutate { id => "mutate_merge_radius_endpoint_geo"
                 merge => { "[radius][endpointGEO]" => "[@metadata][radius_geo][country_code2]" } }
      }
    } # end if radius.endpointIp

  } # end if radius

  if ([tls][client][server_name]) {
    # if requested, look up [tls][client][server_name] queries using freq_server.py to get entropy scores
    ruby {
      id => "rest_ssl_server_name_freq_lookup"
      path => "/usr/share/logstash/malcolm-ruby/freq_lookup.rb"
      script_params => {
        "source" => "[tls][client][server_name]"
        "target_1" => "[event][freq_score_v1]"
        "target_2" => "[event][freq_score_v2]"
        "source_type" => "tls"
      }
    }
  } # end if tls.client.server_name


  ################################################################################################

  if ([user_agent][original]) {
    useragent {
      id => "user_agent_original_parse"
      source => "[user_agent][original]"
      ecs_compatibility => "v8"
    }
  }

  ################################################################################################

  # tag ICS services from if not already tagged
  if ("ics" not in [tags]) and
     (("bacnet" in [network][protocol]) or
      ("bsap" in [network][protocol]) or
      ("cip" in [network][protocol]) or
      ("cotp" in [network][protocol]) or
      ("dnp3" in [network][protocol]) or
      ("ecat" in [network][protocol]) or
      ("enip" in [network][protocol]) or
      ("ethercat" in [network][protocol]) or
      ("ge_srtp" in [network][protocol]) or
      ("genisys" in [network][protocol]) or
      ("hart_ip" in [network][protocol]) or
      ("omron_fins" in [network][protocol]) or
      ("opcua-binary" in [network][protocol]) or
      ("modbus" in [network][protocol]) or
      ("profinet" in [network][protocol]) or
      ("profinet_dce_rpc" in [network][protocol]) or
      ("profinet_io_cm" in [network][protocol]) or
      ("s7comm" in [network][protocol]) or
      ("s7comm-plus" in [network][protocol]) or
      ("s7comm_plus" in [network][protocol]) or
      ("synchrophasor" in [network][protocol])) {
    mutate { id => "mutate_add_tag_ics_from_network_protocol"
             add_tag => [ "ics" ] }
  }

} # end Filter
