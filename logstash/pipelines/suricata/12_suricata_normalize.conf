filter {

  # remove unset/empty top-level field values
  ruby {
    id => "ruby_suricata_remove_empty_values"
    path => "/usr/share/logstash/malcolm-ruby/compact_event.rb"
  }

  # IP addresses ######################################################################################################
  # ECS - various -> related.ip (all IP-type fields get rolled up into related.ip)

  if ([suricata][tunnel][src_ip]) {             mutate { id => "mutate_merge_field_related_ip_suricata_sunnel_src_ip"
                                                         merge => { "[related][ip]" => "[suricata][tunnel][src_ip]" } } }
  if ([suricata][tunnel][dest_ip]) {            mutate { id => "mutate_merge_field_related_ip_suricata_sunnel_dest_ip"
                                                         merge => { "[related][ip]" => "[suricata][tunnel][dest_ip]" } } }

  # Action ############################################################################################################
  # collect all actions/operations/commands under the parent [event][action] array


  # Result ############################################################################################################
  # collect all result/status/response/errors under the parent [event][result] array

  if ([suricata][anomaly][event]) {             mutate { id => "mutate_merge_field_event_result_suricata_anomaly_event"
                                                         merge => { "[event][result]" => "[suricata][anomaly][event]" } } }


  # Protocol/service version ##########################################################################################
  # collect protocol version under the parent network.protocol_version array


  # Filenames #########################################################################################################
  # collect all filenames under the parent [file][path] array
  # ECS file.directory, file.name, file.path (https://www.elastic.co/guide/en/ecs/current/ecs-file.html)
  # - file.directory - directory where the file is located, including the drive letter when appropriate
  # - file.name - name of the file including the extension, without the directory
  # - file.path - full path to the file, including the file name, including the drive letter when appropriate
  # In the enrichment pipeline during normalization these fields will be used to construct each other.

  if ([suricata][fileinfo][filename])     { mutate { id => "mutate_merge_normalize_suricata_fileinfo_filename"
                                                     merge => { "[file][path]" => "[suricata][fileinfo][filename]" } } }
  if ([suricata][fileinfo][size]) and ([suricata][fileinfo][size] > 0) {
    mutate { id => "mutate_merge_normalize_suricata_fileinfo_size"
             merge => { "[file][size]" => "[suricata][fileinfo][size]" } }
  }

  if ([suricata][files]) {
    ruby {
        id => "ruby_suricata_files"
        code => "
            filePath = Array.new unless (filePath = event.get('[file][path]'))
            fileSize = Array.new unless (fileSize = event.get('[file][size]'))
            Array(event.get('[suricata][files]')).each { |val|
              fname = val&.fetch('filename', nil)
              fsize = val&.fetch('size', nil)
              fstate = val&.fetch('state', nil)
              filePath << fname unless fname.nil?
              fileSize << fsize unless fsize.nil?
            }
            event.set('[file][path]', filePath.uniq) unless filePath.nil? or (filePath.length == 0)
            event.set('[file][size]', fileSize.uniq) unless fileSize.nil? or (fileSize.length == 0)
        "
    }
  }

  # File/MIME types ###################################################################################################
  # ECS -> various -> file.mime_type
  # collect all file/MIME types under the parent [file][mime_type] array

  if ([suricata][fileinfo][magic]) {        mutate { id => "mutate_merge_normalize_suricata_fileinfo_mime_type"
                                                     merge => { "[file][mime_type]" => "[suricata][fileinfo][magic]" } } }

  # File/file source #####################################################################################################
  # ECS -> various -> file.source
  # collect file source under file.source
  if ([file]) and ([network][protocol])      { mutate { id => "mutate_suricata_merge_file_source"
                                                        merge => { "[file][source]" => "[network][protocol]" } } }

  # Hashes ############################################################################################################
  # ECS - various -> related.hash (accumulate all hash/fingerprint fields into related.hash)
  if ([suricata][fileinfo][md5]) {          mutate { id => "mutate_merge_field_related_hash_fileinfo_md5"
                                                     merge => { "[related][hash]" => "[suricata][fileinfo][md5]" } } }
  if ([suricata][fileinfo][sha1]) {         mutate { id => "mutate_merge_field_related_hash_fileinfo_sha1"
                                                     merge => { "[related][hash]" => "[suricata][fileinfo][sha1]" } } }
  if ([suricata][fileinfo][sha256]) {       mutate { id => "mutate_merge_field_related_hash_fileinfo_sha256"
                                                     merge => { "[related][hash]" => "[suricata][fileinfo][sha256]" } } }


}