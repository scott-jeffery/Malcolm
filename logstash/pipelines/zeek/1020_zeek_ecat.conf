########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "ecat_registers") {
    #############################################################################################################################
    # ecat_registers.log
    # https://github.com/cisagov/icsnpp-ethercat

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ecat_registers_fields"
        rename => { "[zeek_cols][srcmac]" => "[zeek_cols][orig_l2_addr]" }
        rename => { "[zeek_cols][dstmac]" => "[zeek_cols][resp_l2_addr]" }
        rename => { "[zeek_cols][Command]" => "[zeek_cols][command]" }
        rename => { "[zeek_cols][Slave_Addr]" => "[zeek_cols][server_addr]" }
        rename => { "[zeek_cols][Register_Type]" => "[zeek_cols][register_type]" }
        rename => { "[zeek_cols][Register_Addr]" => "[zeek_cols][register_addr]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ecat_registers"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][orig_l2_addr]} %{[zeek_cols][resp_l2_addr]} %{[zeek_cols][command]} %{[zeek_cols][server_addr]} %{[zeek_cols][register_type]} %{[zeek_cols][register_addr]} %{[zeek_cols][data]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ecat_registers"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ecat_registers"
          init => "@zeek_ecat_registers_field_names = [ 'ts', 'orig_l2_addr', 'resp_l2_addr', 'command', 'server_addr', 'register_type', 'register_addr', 'data' ]"
          code => "event.set('[zeek_cols]', @zeek_ecat_registers_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ecat_registers"
      add_field => {
        "[zeek_cols][service]" => "ethercat"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "ecat_log_address") {
    #############################################################################################################################
    # ecat_log_address.log
    # https://github.com/cisagov/icsnpp-ethercat

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ecat_log_address_fields"
        rename => { "[zeek_cols][srcmac]" => "[zeek_cols][orig_l2_addr]" }
        rename => { "[zeek_cols][dstmac]" => "[zeek_cols][resp_l2_addr]" }
        rename => { "[zeek_cols][Log_Addr]" => "[zeek_cols][log_addr]" }
        rename => { "[zeek_cols][Length]" => "[zeek_cols][length]" }
        rename => { "[zeek_cols][Command]" => "[zeek_cols][command]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ecat_log_address"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][orig_l2_addr]} %{[zeek_cols][resp_l2_addr]} %{[zeek_cols][log_addr]} %{[zeek_cols][length]} %{[zeek_cols][command]} %{[zeek_cols][data]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ecat_log_address"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ecat_log_address"
          init => "@zeek_ecat_log_address_field_names = [ 'ts', 'orig_l2_addr', 'resp_l2_addr', 'log_addr', 'length', 'command', 'data' ]"
          code => "event.set('[zeek_cols]', @zeek_ecat_log_address_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ecat_log_address"
      add_field => {
        "[zeek_cols][service]" => "ethercat"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "ecat_dev_info") {
    #############################################################################################################################
    # ecat_dev_info.log
    # https://github.com/cisagov/icsnpp-ethercat

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ecat_dev_info_fields"
        rename => { "[zeek_cols][slave_id]" => "[zeek_cols][server_id]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ecat_dev_info"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][server_id]} %{[zeek_cols][revision]} %{[zeek_cols][dev_type]} %{[zeek_cols][build]} %{[zeek_cols][fmmucnt]} %{[zeek_cols][smcount]} %{[zeek_cols][ports]} %{[zeek_cols][dpram]} %{[zeek_cols][features]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ecat_dev_info"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ecat_dev_info"
          init => "@zeek_ecat_dev_info_field_names = [ 'ts', 'server_id', 'revision', 'dev_type', 'build', 'fmmucnt', 'smcount', 'ports', 'dpram', 'features' ]"
          code => "event.set('[zeek_cols]', @zeek_ecat_dev_info_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ecat_dev_info"
      add_field => {
        "[zeek_cols][service]" => "ethercat"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "ecat_aoe_info") {
    #############################################################################################################################
    # ecat_aoe_info.log
    # https://github.com/cisagov/icsnpp-ethercat

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ecat_aoe_info_fields"
        rename => { "[zeek_cols][targetid]" => "[zeek_cols][resp_l2_addr]" }
        rename => { "[zeek_cols][targetport]" => "[zeek_cols][resp_port]" }
        rename => { "[zeek_cols][senderid]" => "[zeek_cols][orig_l2_addr]" }
        rename => { "[zeek_cols][senderport]" => "[zeek_cols][orig_port]" }
        rename => { "[zeek_cols][cmd]" => "[zeek_cols][command]" }
        rename => { "[zeek_cols][stateflags]" => "[zeek_cols][state]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ecat_aoe_info"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][resp_l2_addr]} %{[zeek_cols][resp_port]} %{[zeek_cols][orig_l2_addr]} %{[zeek_cols][orig_port]} %{[zeek_cols][command]} %{[zeek_cols][state]} %{[zeek_cols][data]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ecat_aoe_info"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ecat_aoe_info"
          init => "@zeek_ecat_aoe_info_field_names = [ 'ts', 'resp_l2_addr', 'resp_port', 'orig_l2_addr', 'orig_port', 'command', 'state', 'data' ]"
          code => "event.set('[zeek_cols]', @zeek_ecat_aoe_info_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ecat_aoe_info"
      add_field => {
        "[zeek_cols][service]" => "ethercat"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "ecat_coe_info") {
    #############################################################################################################################
    # ecat_coe_info.log
    # https://github.com/cisagov/icsnpp-ethercat

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ecat_coe_info_fields"
        rename => { "[zeek_cols][Type]" => "[zeek_cols][type]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ecat_coe_info"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][number]} %{[zeek_cols][type]} %{[zeek_cols][req_resp]} %{[zeek_cols][index]} %{[zeek_cols][subindex]} %{[zeek_cols][dataoffset]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ecat_coe_info"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ecat_coe_info"
          init => "@zeek_ecat_coe_info_field_names = [ 'ts', 'number', 'type', 'req_resp', 'index', 'subindex', 'dataoffset' ]"
          code => "event.set('[zeek_cols]', @zeek_ecat_coe_info_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ecat_coe_info"
      add_field => {
        "[zeek_cols][service]" => "ethercat"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "ecat_foe_info") {
    #############################################################################################################################
    # ecat_foe_info.log
    # https://github.com/cisagov/icsnpp-ethercat

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ecat_foe_info_fields"
        rename => { "[zeek_cols][opCode]" => "[zeek_cols][opcode]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ecat_foe_info"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][opcode]} %{[zeek_cols][reserved]} %{[zeek_cols][packet_num]} %{[zeek_cols][error_code]} %{[zeek_cols][filename]} %{[zeek_cols][data]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ecat_foe_info"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ecat_foe_info"
          init => "@zeek_ecat_foe_info_field_names = [ 'ts', 'opcode', 'reserved', 'packet_num', 'error_code', 'filename', 'data' ]"
          code => "event.set('[zeek_cols]', @zeek_ecat_foe_info_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ecat_foe_info"
      add_field => {
        "[zeek_cols][service]" => "ethercat"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "ecat_soe_info") {
    #############################################################################################################################
    # ecat_soe_info.log
    # https://github.com/cisagov/icsnpp-ethercat

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ecat_soe_info_fields"
        rename => { "[zeek_cols][opCode]" => "[zeek_cols][opcode]" }
        rename => { "[zeek_cols][element_flags]" => "[zeek_cols][element]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ecat_soe_info"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][opcode]} %{[zeek_cols][incomplete]} %{[zeek_cols][error]} %{[zeek_cols][drive_num]} %{[zeek_cols][element]} %{[zeek_cols][index]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ecat_soe_info"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ecat_soe_info"
          init => "@zeek_ecat_soe_info_field_names = [ 'ts', 'opcode', 'incomplete', 'error', 'drive_num', 'element', 'index' ]"
          code => "event.set('[zeek_cols]', @zeek_ecat_soe_info_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ecat_soe_info"
      add_field => {
        "[zeek_cols][service]" => "ethercat"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "ecat_arp_info") {
    #############################################################################################################################
    # ecat_arp_info.log
    # https://github.com/cisagov/icsnpp-ethercat
    #
    # NOTE: I currently have this disabled via policy hook in local.zeek, as it is including ALL arps and
    # not just those from ethercat traffic which can be misleading (i.e., indicating ecat traffic where there is none)

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ecat_arp_info_fields"
        rename => { "[zeek_cols][mac_src]" => "[zeek_cols][orig_l2_addr]" }
        rename => { "[zeek_cols][mac_dst]" => "[zeek_cols][resp_l2_addr]" }
        rename => { "[zeek_cols][SPA]" => "[zeek_cols][orig_proto_addr]" }
        rename => { "[zeek_cols][SHA]" => "[zeek_cols][orig_hw_addr]" }
        rename => { "[zeek_cols][TPA]" => "[zeek_cols][resp_proto_addr]" }
        rename => { "[zeek_cols][THA]" => "[zeek_cols][resp_hw_addr]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ecat_arp_info"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][arp_type]} %{[zeek_cols][orig_l2_addr]} %{[zeek_cols][resp_l2_addr]} %{[zeek_cols][orig_proto_addr]} %{[zeek_cols][orig_hw_addr]} %{[zeek_cols][resp_proto_addr]} %{[zeek_cols][resp_hw_addr]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ecat_arp_info"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ecat_arp_info"
          init => "@zeek_ecat_arp_info_field_names = [ 'ts', 'arp_type', 'orig_l2_addr', 'resp_l2_addr', 'orig_proto_addr', 'orig_hw_addr', 'resp_proto_addr', 'resp_hw_addr' ]"
          code => "event.set('[zeek_cols]', @zeek_ecat_arp_info_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ecat_arp_info"
      add_field => {
        "[zeek_cols][service]" => "ethercat"
      }
    }

    # TODO: check orig_proto_addr/orig_hw_addr resp_proto_addr/resp_hw_addr and convert to ip, etc. if necessary?

  }

} # end Filter
