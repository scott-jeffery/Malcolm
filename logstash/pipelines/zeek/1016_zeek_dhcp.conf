########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "dhcp") {
    #############################################################################################################################
    # dhcp.log
    # https://docs.zeek.org/en/stable/scripts/base/protocols/dhcp/main.zeek.html#type-DHCP::Info

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_dhcp_fields"
        rename => { "[zeek_cols][uids]" => "[zeek_cols][uid]" }
        rename => { "[zeek_cols][client_addr]" => "[zeek_cols][orig_h]" }
        rename => { "[zeek_cols][server_addr]" => "[zeek_cols][orig_p]" }
        rename => { "[zeek_cols][mac]" => "[zeek_cols][orig_l2_addr]" }
        rename => { "[zeek_cols][requested_addr]" => "[zeek_cols][requested_ip]" }
        rename => { "[zeek_cols][assigned_addr]" => "[zeek_cols][assigned_ip]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_dhcp_with_all_fields"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][resp_h]} %{[zeek_cols][orig_l2_addr]} %{[zeek_cols][host_name]} %{[zeek_cols][client_fqdn]} %{[zeek_cols][domain]} %{[zeek_cols][requested_ip]} %{[zeek_cols][assigned_ip]} %{[zeek_cols][lease_time]} %{[zeek_cols][client_message]} %{[zeek_cols][server_message]} %{[zeek_cols][msg_types]} %{[zeek_cols][duration]} %{[zeek_cols][client_software]} %{[zeek_cols][server_software]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_dhcp"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_dhcp"
          init => "@zeek_dhcp_field_names = [ 'ts', 'uid', 'orig_h', 'resp_h', 'orig_l2_addr', 'host_name', 'client_fqdn', 'domain', 'requested_ip', 'assigned_ip', 'lease_time', 'client_message', 'server_message', 'msg_types', 'duration', 'client_software', 'server_software' ]"
          code => "event.set('[zeek_cols]', @zeek_dhcp_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_dhcp_msg_types"
               split => { "[zeek_cols][msg_types]" => "," } }
      if ([zeek_cols][uid]) and
         ([zeek_cols][uid] != '(empty)') and
         ([zeek_cols][uid] != '') {
        mutate { id => "mutate_split_zeek_dhcp_uids"
                 split => { "[zeek_cols][uid]" => "," } }
      }
    }

    if ([zeek_cols][uid] and [zeek_cols][uid][0]) {
      mutate { id => "mutate_add_field_zeek_dhcp_uids"
               add_field => { "[rootId]" => "%{[zeek_cols][uid][0]}" } }
    }

    if ((![zeek_cols][orig_p]) and (![zeek_cols][resp_p])) {
      mutate {
        id => "mutate_add_field_zeek_dhcp_ports"
        add_field => {
          "[zeek_cols][orig_p]" => 68
          "[zeek_cols][resp_p]" => 67
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_dhcp"
      add_field => {
        "[zeek_cols][proto]" => "udp"
        "[zeek_cols][service]" => "dhcp"
      }
    }

  }

} # end Filter
