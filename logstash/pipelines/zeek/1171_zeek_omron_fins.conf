filter {

  if ([log_source] == "omron_fins_data_link_status_read") {
    #############################################################################################################################
    # omron_fins_data_link_status_read.log
    # omron_fins_types.zeek (https://github.com/cisagov/icsnpp-omron-fins)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_omron_fins_data_link_status_read"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}	%{[zeek_cols][uid]}	%{[zeek_cols][orig_h]}	%{[zeek_cols][orig_p]}	%{[zeek_cols][resp_h]}	%{[zeek_cols][resp_p]}	%{[zeek_cols][omron_fins_link_id]}	%{[zeek_cols][command_code]}	%{[zeek_cols][icf_data_type]}	%{[zeek_cols][response_code]}	%{[zeek_cols][node_number]}	%{[zeek_cols][data_links]}	%{[zeek_cols][node_setting]}	%{[zeek_cols][master_node_number]}	%{[zeek_cols][error_status]}	%{[zeek_cols][mode_status]}	%{[zeek_cols][warning_status]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_omron_fins_data_link_status_read"
          split => { "[message]" => "	" }
        }
        ruby {
          id => "ruby_zip_zeek_omron_fins_data_link_status_read"
          init => "@zeek_data_link_status_read_log_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'omron_fins_link_id', 'command_code', 'icf_data_type', 'response_code', 'node_number', 'data_links', 'node_setting', 'master_node_number', 'error_status', 'mode_status', 'warning_status' ]"
          code => "event.set('[zeek_cols]', @zeek_data_link_status_read_log_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_omron_fins_data_link_status_read"
      add_field => {
        "[zeek_cols][service]" => "omron_fins"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "omron_fins_error") {
    #############################################################################################################################
    # omron_fins_error.log
    # omron_fins_types.zeek (https://github.com/cisagov/icsnpp-omron-fins)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_omron_fins_error"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}	%{[zeek_cols][uid]}	%{[zeek_cols][orig_h]}	%{[zeek_cols][orig_p]}	%{[zeek_cols][resp_h]}	%{[zeek_cols][resp_p]}	%{[zeek_cols][omron_fins_link_id]}	%{[zeek_cols][command_code]}	%{[zeek_cols][icf_data_type]}	%{[zeek_cols][response_code]}	%{[zeek_cols][error_reset_fal_no]}	%{[zeek_cols][beginning_record_no]}	%{[zeek_cols][max_no_stored_records]}	%{[zeek_cols][no_of_stored_records]}	%{[zeek_cols][no_of_records]}	%{[zeek_cols][error_code_1]}	%{[zeek_cols][error_code_2]}	%{[zeek_cols][minute]}	%{[zeek_cols][second]}	%{[zeek_cols][day]}	%{[zeek_cols][hour]}	%{[zeek_cols][year]}	%{[zeek_cols][month]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_omron_fins_error"
          split => { "[message]" => "	" }
        }
        ruby {
          id => "ruby_zip_zeek_omron_fins_error"
          init => "@zeek_detail_error_log_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'omron_fins_link_id', 'command_code', 'icf_data_type', 'response_code', 'error_reset_fal_no', 'beginning_record_no', 'max_no_stored_records', 'no_of_stored_records', 'no_of_records', 'error_code_1', 'error_code_2', 'minute', 'second', 'day', 'hour', 'year', 'month' ]"
          code => "event.set('[zeek_cols]', @zeek_detail_error_log_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_omron_fins_error"
      add_field => {
        "[zeek_cols][service]" => "omron_fins"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "omron_fins_file") {
    #############################################################################################################################
    # omron_fins_file.log
    # omron_fins_types.zeek (https://github.com/cisagov/icsnpp-omron-fins)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_omron_fins_file"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}	%{[zeek_cols][uid]}	%{[zeek_cols][orig_h]}	%{[zeek_cols][orig_p]}	%{[zeek_cols][resp_h]}	%{[zeek_cols][resp_p]}	%{[zeek_cols][omron_fins_link_id]}	%{[zeek_cols][command_code]}	%{[zeek_cols][icf_data_type]}	%{[zeek_cols][response_code]}	%{[zeek_cols][disk_no]}	%{[zeek_cols][beginning_file_position]}	%{[zeek_cols][no_of_files]}	%{[zeek_cols][volume_label]}	%{[zeek_cols][year]}	%{[zeek_cols][month]}	%{[zeek_cols][day]}	%{[zeek_cols][hour]}	%{[zeek_cols][minute]}	%{[zeek_cols][second]}	%{[zeek_cols][total_capacity]}	%{[zeek_cols][unused_capacity]}	%{[zeek_cols][total_no_files]}	%{[zeek_cols][no_files_read]}	%{[zeek_cols][last_file]}	%{[zeek_cols][file_name]}	%{[zeek_cols][file_capacity]}	%{[zeek_cols][file_position]}	%{[zeek_cols][data_length]}	%{[zeek_cols][fuid]}	%{[zeek_cols][parameter_code]}	%{[zeek_cols][src_disk_no]}	%{[zeek_cols][src_file_name]}	%{[zeek_cols][dst_disk_no]}	%{[zeek_cols][dst_file_name]}	%{[zeek_cols][old_file_name]}	%{[zeek_cols][new_file_name]}	%{[zeek_cols][parameter_area_code]}	%{[zeek_cols][beginning_address]}	%{[zeek_cols][no_of_words]}	%{[zeek_cols][memory_area_code]}	%{[zeek_cols][no_of_items]}	%{[zeek_cols][program_no]}	%{[zeek_cols][no_of_bytes]}	%{[zeek_cols][beginning_word]}	%{[zeek_cols][beginning_block_no]}	%{[zeek_cols][no_of_blocks]}	%{[zeek_cols][remaining_blocks]}	%{[zeek_cols][total_no_of_blocks]}	%{[zeek_cols][memory_type]}	%{[zeek_cols][data_type]}	%{[zeek_cols][last_block]}	%{[zeek_cols][protected]}	%{[zeek_cols][control_data]}	%{[zeek_cols][block_no]}	%{[zeek_cols][memory_data]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_omron_fins_file"
          split => { "[message]" => "	" }
        }
        ruby {
          id => "ruby_zip_zeek_omron_fins_file"
          init => "@zeek_detail_file_log_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'omron_fins_link_id', 'command_code', 'icf_data_type', 'response_code', 'disk_no', 'beginning_file_position', 'no_of_files', 'volume_label', 'year', 'month', 'day', 'hour', 'minute', 'second', 'total_capacity', 'unused_capacity', 'total_no_files', 'no_files_read', 'last_file', 'file_name', 'file_capacity', 'file_position', 'data_length', 'fuid', 'parameter_code', 'src_disk_no', 'src_file_name', 'dst_disk_no', 'dst_file_name', 'old_file_name', 'new_file_name', 'parameter_area_code', 'beginning_address', 'no_of_words', 'memory_area_code', 'no_of_items', 'program_no', 'no_of_bytes', 'beginning_word', 'beginning_block_no', 'no_of_blocks', 'remaining_blocks', 'total_no_of_blocks', 'memory_type', 'data_type', 'last_block', 'protected', 'control_data', 'block_no', 'memory_data' ]"
          code => "event.set('[zeek_cols]', @zeek_detail_file_log_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_omron_fins_file"
      add_field => {
        "[zeek_cols][service]" => "omron_fins"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "omron_fins_detail") {
    #############################################################################################################################
    # omron_fins_detail.log
    # omron_fins_types.zeek (https://github.com/cisagov/icsnpp-omron-fins)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_omron_fins_detail"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}	%{[zeek_cols][uid]}	%{[zeek_cols][orig_h]}	%{[zeek_cols][orig_p]}	%{[zeek_cols][resp_h]}	%{[zeek_cols][resp_p]}	%{[zeek_cols][omron_fins_link_id]}	%{[zeek_cols][command_code]}	%{[zeek_cols][icf_data_type]}	%{[zeek_cols][memory_area_code]}	%{[zeek_cols][beginning_address]}	%{[zeek_cols][number_of_items]}	%{[zeek_cols][parameter_area_code]}	%{[zeek_cols][beginning_word]}	%{[zeek_cols][number_of_words]}	%{[zeek_cols][last_word_bit]}	%{[zeek_cols][response_code]}	%{[zeek_cols][data]}	%{[zeek_cols][year]}	%{[zeek_cols][month]}	%{[zeek_cols][date]}	%{[zeek_cols][hour]}	%{[zeek_cols][minute]}	%{[zeek_cols][second]}	%{[zeek_cols][day]}	%{[zeek_cols][clock_time]}	%{[zeek_cols][intelligent_id_no]}	%{[zeek_cols][first_word]}	%{[zeek_cols][read_length]}	%{[zeek_cols][data_length]}	%{[zeek_cols][num_of_link_nodes]}	%{[zeek_cols][block_record_data_link_status]}	%{[zeek_cols][block_record_num_of_link_nodes]}	%{[zeek_cols][block_record_node_num]}	%{[zeek_cols][block_record_cio_area_first_word]}	%{[zeek_cols][block_record_kind_of_dm]}	%{[zeek_cols][block_record_dm_area_first_word]}	%{[zeek_cols][block_record_num_of_total_words]}	%{[zeek_cols][program_no]}	%{[zeek_cols][protect_code]}	%{[zeek_cols][password]}	%{[zeek_cols][last_word]}	%{[zeek_cols][clear_code]}	%{[zeek_cols][number_of_bytes]}	%{[zeek_cols][run_mode]}	%{[zeek_cols][controller_data_to_read]}	%{[zeek_cols][controller_model]}	%{[zeek_cols][controller_version]}	%{[zeek_cols][for_system_use]}	%{[zeek_cols][program_area_size]}	%{[zeek_cols][iom_size]}	%{[zeek_cols][no_of_dm_words]}	%{[zeek_cols][timer_size]}	%{[zeek_cols][expansion_dm_size]}	%{[zeek_cols][no_of_steps_transitions]}	%{[zeek_cols][kind_of_memory_card]}	%{[zeek_cols][memory_card_size]}	%{[zeek_cols][cpu_bus_unit_config]}	%{[zeek_cols][no_of_sysmac_bus_master_mounted]}	%{[zeek_cols][no_of_sysmac_bus2_master_mounted]}	%{[zeek_cols][peripheral_device_connected]}	%{[zeek_cols][built_in_host_interface]}	%{[zeek_cols][no_of_racks_connected]}	%{[zeek_cols][no_of_units]}	%{[zeek_cols][unit_address]}	%{[zeek_cols][model_number]}	%{[zeek_cols][controller_status_data_read_status]}	%{[zeek_cols][controller_status_data_read_mode]}	%{[zeek_cols][fatal_error]}	%{[zeek_cols][non_fatal_error]}	%{[zeek_cols][message_yes_no]}	%{[zeek_cols][fal_fals_no]}	%{[zeek_cols][error_message]}	%{[zeek_cols][cycle_time_read_parameter]}	%{[zeek_cols][average_cycle_time]}	%{[zeek_cols][max_cycle_time]}	%{[zeek_cols][min_cycle_time]}	%{[zeek_cols][test_data]}	%{[zeek_cols][number_of_receptions]}	%{[zeek_cols][command]}	%{[zeek_cols][message_no_0]}	%{[zeek_cols][message_no_1]}	%{[zeek_cols][message_no_2]}	%{[zeek_cols][message_no_3]}	%{[zeek_cols][message_no_4]}	%{[zeek_cols][message_no_5]}	%{[zeek_cols][message_no_6]}	%{[zeek_cols][message_no_7]}	%{[zeek_cols][message_0]}	%{[zeek_cols][message_1]}	%{[zeek_cols][message_2]}	%{[zeek_cols][message_3]}	%{[zeek_cols][message_4]}	%{[zeek_cols][message_5]}	%{[zeek_cols][message_6]}	%{[zeek_cols][message_7]}	%{[zeek_cols][fal_fals_no_0]}	%{[zeek_cols][fal_fals_no_1]}	%{[zeek_cols][fal_fals_no_2]}	%{[zeek_cols][fal_fals_no_3]}	%{[zeek_cols][fal_fals_no_4]}	%{[zeek_cols][fal_fals_no_5]}	%{[zeek_cols][fal_fals_no_6]}	%{[zeek_cols][fal_fals_no_7]}	%{[zeek_cols][fal_fals_no_8]}	%{[zeek_cols][fal_fals_no_9]}	%{[zeek_cols][fal_fals_no_10]}	%{[zeek_cols][fal_fals_no_11]}	%{[zeek_cols][fal_fals_no_12]}	%{[zeek_cols][fal_fals_no_13]}	%{[zeek_cols][fal_fals_0]}	%{[zeek_cols][fal_fals_1]}	%{[zeek_cols][fal_fals_2]}	%{[zeek_cols][fal_fals_3]}	%{[zeek_cols][fal_fals_4]}	%{[zeek_cols][fal_fals_5]}	%{[zeek_cols][fal_fals_6]}	%{[zeek_cols][fal_fals_7]}	%{[zeek_cols][fal_fals_8]}	%{[zeek_cols][fal_fals_9]}	%{[zeek_cols][fal_fals_10]}	%{[zeek_cols][fal_fals_11]}	%{[zeek_cols][fal_fals_12]}	%{[zeek_cols][fal_fals_13]}	%{[zeek_cols][acquire_network_address]}	%{[zeek_cols][acquire_node_number]}	%{[zeek_cols][acquire_unit_address]}	%{[zeek_cols][no_of_bits]}	%{[zeek_cols][set_reset_specification]}	%{[zeek_cols][bit_flag]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_omron_fins_detail"
          split => { "[message]" => "	" }
        }
        ruby {
          id => "ruby_zip_zeek_omron_fins_detail"
          init => "@zeek_detail_log_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'omron_fins_link_id', 'command_code', 'icf_data_type', 'memory_area_code', 'beginning_address', 'number_of_items', 'parameter_area_code', 'beginning_word', 'number_of_words', 'last_word_bit', 'response_code', 'data', 'year', 'month', 'date', 'hour', 'minute', 'second', 'day', 'clock_time', 'intelligent_id_no', 'first_word', 'read_length', 'data_length', 'num_of_link_nodes', 'block_record_data_link_status', 'block_record_num_of_link_nodes', 'block_record_node_num', 'block_record_cio_area_first_word', 'block_record_kind_of_dm', 'block_record_dm_area_first_word', 'block_record_num_of_total_words', 'program_no', 'protect_code', 'password', 'last_word', 'clear_code', 'number_of_bytes', 'run_mode', 'controller_data_to_read', 'controller_model', 'controller_version', 'for_system_use', 'program_area_size', 'iom_size', 'no_of_dm_words', 'timer_size', 'expansion_dm_size', 'no_of_steps_transitions', 'kind_of_memory_card', 'memory_card_size', 'cpu_bus_unit_config', 'no_of_sysmac_bus_master_mounted', 'no_of_sysmac_bus2_master_mounted', 'peripheral_device_connected', 'built_in_host_interface', 'no_of_racks_connected', 'no_of_units', 'unit_address', 'model_number', 'controller_status_data_read_status', 'controller_status_data_read_mode', 'fatal_error', 'non_fatal_error', 'message_yes_no', 'fal_fals_no', 'error_message', 'cycle_time_read_parameter', 'average_cycle_time', 'max_cycle_time', 'min_cycle_time', 'test_data', 'number_of_receptions', 'command', 'message_no_0', 'message_no_1', 'message_no_2', 'message_no_3', 'message_no_4', 'message_no_5', 'message_no_6', 'message_no_7', 'message_0', 'message_1', 'message_2', 'message_3', 'message_4', 'message_5', 'message_6', 'message_7', 'fal_fals_no_0', 'fal_fals_no_1', 'fal_fals_no_2', 'fal_fals_no_3', 'fal_fals_no_4', 'fal_fals_no_5', 'fal_fals_no_6', 'fal_fals_no_7', 'fal_fals_no_8', 'fal_fals_no_9', 'fal_fals_no_10', 'fal_fals_no_11', 'fal_fals_no_12', 'fal_fals_no_13', 'fal_fals_0', 'fal_fals_1', 'fal_fals_2', 'fal_fals_3', 'fal_fals_4', 'fal_fals_5', 'fal_fals_6', 'fal_fals_7', 'fal_fals_8', 'fal_fals_9', 'fal_fals_10', 'fal_fals_11', 'fal_fals_12', 'fal_fals_13', 'acquire_network_address', 'acquire_node_number', 'acquire_unit_address', 'no_of_bits', 'set_reset_specification', 'bit_flag' ]"
          code => "event.set('[zeek_cols]', @zeek_detail_log_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_omron_fins_detail"
      add_field => {
        "[zeek_cols][service]" => "omron_fins"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "omron_fins") {
    #############################################################################################################################
    # omron_fins_general.log
    # omron_fins_types.zeek (https://github.com/cisagov/icsnpp-omron-fins)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_omron_fins"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}	%{[zeek_cols][uid]}	%{[zeek_cols][orig_h]}	%{[zeek_cols][orig_p]}	%{[zeek_cols][resp_h]}	%{[zeek_cols][resp_p]}	%{[zeek_cols][proto]}	%{[zeek_cols][omron_fins_link_id]}	%{[zeek_cols][tcp_header]}	%{[zeek_cols][tcp_length]}	%{[zeek_cols][tcp_command]}	%{[zeek_cols][tcp_error_code]}	%{[zeek_cols][client_node_address]}	%{[zeek_cols][server_node_address]}	%{[zeek_cols][icf_gateway]}	%{[zeek_cols][icf_data_type]}	%{[zeek_cols][icf_response_setting]}	%{[zeek_cols][gateway_count]}	%{[zeek_cols][destination_network_address]}	%{[zeek_cols][destination_node_number]}	%{[zeek_cols][destination_unit_address]}	%{[zeek_cols][source_network_address]}	%{[zeek_cols][source_node_number]}	%{[zeek_cols][source_unit_address]}	%{[zeek_cols][service_id]}	%{[zeek_cols][command_code]}	%{[zeek_cols][response_code]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_omron_fins"
          split => { "[message]" => "	" }
        }
        ruby {
          id => "ruby_zip_zeek_omron_fins"
          init => "@zeek_general_log_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'omron_fins_link_id', 'tcp_header', 'tcp_length', 'tcp_command', 'tcp_error_code', 'client_node_address', 'server_node_address', 'icf_gateway', 'icf_data_type', 'icf_response_setting', 'gateway_count', 'destination_network_address', 'destination_node_number', 'destination_unit_address', 'source_network_address', 'source_node_number', 'source_unit_address', 'service_id', 'command_code', 'response_code' ]"
          code => "event.set('[zeek_cols]', @zeek_general_log_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_omron_fins"
      add_field => { "[zeek_cols][service]" => "omron_fins" }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "omron_fins_network_status_read") {
    #############################################################################################################################
    # omron_fins_network_status_read.log
    # omron_fins_types.zeek (https://github.com/cisagov/icsnpp-omron-fins)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_omron_fins_network_status_read"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}	%{[zeek_cols][uid]}	%{[zeek_cols][orig_h]}	%{[zeek_cols][orig_p]}	%{[zeek_cols][resp_h]}	%{[zeek_cols][resp_p]}	%{[zeek_cols][omron_fins_link_id]}	%{[zeek_cols][command_code]}	%{[zeek_cols][icf_data_type]}	%{[zeek_cols][response_code]}	%{[zeek_cols][node_number]}	%{[zeek_cols][in_network]}	%{[zeek_cols][exit_status]}	%{[zeek_cols][polling]}	%{[zeek_cols][communication_cycle_time]}	%{[zeek_cols][current_polling_node_number]}	%{[zeek_cols][cyclic_operation]}	%{[zeek_cols][cyclic_transmission_status]}	%{[zeek_cols][non_fatal_error]}	%{[zeek_cols][cyclic_error_count]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_omron_fins_network_status_read"
          split => { "[message]" => "	" }
        }
        ruby {
          id => "ruby_zip_zeek_omron_fins_network_status_read"
          init => "@zeek_network_status_read_log_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'omron_fins_link_id', 'command_code', 'icf_data_type', 'response_code', 'node_number', 'in_network', 'exit_status', 'polling', 'communication_cycle_time', 'current_polling_node_number', 'cyclic_operation', 'cyclic_transmission_status', 'non_fatal_error', 'cyclic_error_count' ]"
          code => "event.set('[zeek_cols]', @zeek_network_status_read_log_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_omron_fins_network_status_read"
      add_field => {
        "[zeek_cols][service]" => "omron_fins"
      }
      add_tag => [ "ics" ]
    }
  }

}

