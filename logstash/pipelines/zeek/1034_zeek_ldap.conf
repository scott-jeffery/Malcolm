########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "ldap") {
    #############################################################################################################################
    # ldap.log
    # main.zeek (https://docs.zeek.org/en/master/scripts/base/protocols/ldap/main.zeek.html)

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ldap_fields"
        rename => { "[zeek_cols][arguments]" => "[zeek_cols][argument]" }
        rename => { "[zeek_cols][opcode]" => "[zeek_cols][operation]" }
        rename => { "[zeek_cols][opcodes]" => "[zeek_cols][operation]" }
        rename => { "[zeek_cols][result]" => "[zeek_cols][result_code]" }
        rename => { "[zeek_cols][results]" => "[zeek_cols][result_code]" }
        rename => { "[zeek_cols][diagnostic_message]" => "[zeek_cols][result_message]" }
        rename => { "[zeek_cols][diagnostic_messages]" => "[zeek_cols][result_message]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ldap"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][message_id]} %{[zeek_cols][version]} %{[zeek_cols][operation]} %{[zeek_cols][result_code]} %{[zeek_cols][result_message]} %{[zeek_cols][object]} %{[zeek_cols][argument]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ldap"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ldap"
          init => "@zeek_ldap_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'message_id', 'version', 'operation', 'result_code', 'result_message', 'object', 'argument' ]"
          code => "event.set('[zeek_cols]', @zeek_ldap_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ldap"
      add_field => {
        "[zeek_cols][service]" => "ldap"
      }

    }

  } else if ([log_source] == "ldap_search") {
    #############################################################################################################################
    # ldap_search.log
    # main.zeek (https://docs.zeek.org/en/master/scripts/base/protocols/ldap/main.zeek.html)

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ldap_search_fields"
        rename => { "[zeek_cols][base_objects]" => "[zeek_cols][base_object]" }
        rename => { "[zeek_cols][deref_aliases]" => "[zeek_cols][deref]" }
        rename => { "[zeek_cols][derefs]" => "[zeek_cols][deref]" }
        rename => { "[zeek_cols][diagnostic_message]" => "[zeek_cols][result_message]" }
        rename => { "[zeek_cols][result]" => "[zeek_cols][result_code]" }
        rename => { "[zeek_cols][results]" => "[zeek_cols][result_code]" }
        rename => { "[zeek_cols][scopes]" => "[zeek_cols][scope]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ldap_search"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][message_id]} %{[zeek_cols][scope]} %{[zeek_cols][deref]} %{[zeek_cols][base_object]} %{[zeek_cols][result_count]} %{[zeek_cols][result_code]} %{[zeek_cols][result_message]} %{[zeek_cols][filter]} %{[zeek_cols][attributes]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ldap_search"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ldap_search"
          init => "@zeek_ldap_search_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'message_id', 'scope', 'deref', 'base_object', 'result_count', 'result_code', 'result_message', 'filter', 'attributes' ]"
          code => "event.set('[zeek_cols]', @zeek_ldap_search_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_ldap_search"
      add_field => {
        "[zeek_cols][service]" => "ldap"
      }

    }

  }

} # end Filter
