########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "signatures") {
    #############################################################################################################################
    # signatures.log

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_signatures"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][note]} %{[zeek_cols][signature_id]} %{[zeek_cols][event_message]} %{[zeek_cols][sub_message]} %{[zeek_cols][signature_count]} %{[zeek_cols][host_count]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_signatures"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_signatures"
          init => "@zeek_signatures_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'note', 'signature_id', 'event_message', 'sub_message', 'signature_count', 'host_count' ]"
          code => "event.set('[zeek_cols]', @zeek_signatures_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      if ("_carved" in [tags]) {
        # Malcolm does some "special" stuff in zeek_carve_logger.py for file carving, sort of hijacking signatures.log for it:
        #   - _carved signature logs' sub_message contains fuid(s) comma-separated
        mutate { id => "mutate_split_zeek_signatures_sub_message"
                 split => { "[zeek_cols][sub_message]" => "," } }
      }
    }

  }

} # end Filter
