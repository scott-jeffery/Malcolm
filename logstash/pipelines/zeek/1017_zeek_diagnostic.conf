########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {

  if ([log_source] == "analyzer") {
    #############################################################################################################################
    # analyzer.log
    # Zeek Logging analyzer confirmations and violations into analyzer.log
    # https://docs.zeek.org/en/master/scripts/base/frameworks/analyzer/logging.zeek.html

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_diagnostic_analyzer"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][cause]} %{[zeek_cols][analyzer_kind]} %{[zeek_cols][analyzer_name]} %{[zeek_cols][uid]} %{[zeek_cols][fuid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][failure_reason]} %{[zeek_cols][failure_data]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_diagnostic_analyzer"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_diagnostic_analyzer"
          init => "@zeek_diagnostic_analyzer_field_names = [ 'ts', 'cause', 'analyzer_kind', 'analyzer_name', 'uid', 'fuid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'failure_reason', 'failure_data' ]"
          code => "event.set('[zeek_cols]', @zeek_diagnostic_analyzer_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    # we are *not* adding the _zeekdiagnostic even though it could arguably be classified as such, the reason being that
    #   the UID/FUID and IP/ports make it suitable to be searched with the network data

  } else if ([log_source] == "broker") {
    #############################################################################################################################
    # broker.log
    # https://docs.zeek.org/en/master/scripts/base/frameworks/broker/log.zeek.html

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_broker_fields"
        rename => { "[zeek_cols][ty]" => "[zeek_cols][event_type]" }
        rename => { "[zeek_cols][ev]" => "[zeek_cols][event_action]" }
        rename => { "[zeek_cols][peer.address]" => "[zeek_cols][peer_ip]" }
        rename => { "[zeek_cols][peer.bound_port]" => "[zeek_cols][peer_port]" }
        rename => { "[zeek_cols][message]" => "[zeek_cols][peer_message]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_diagnostic_broker"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][event_type]} %{[zeek_cols][event_action]} %{[zeek_cols][peer_ip]} %{[zeek_cols][peer_port]} %{[zeek_cols][peer_message]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_diagnostic_broker"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_diagnostic_broker"
          init => "@zeek_diagnostic_broker_field_names = [ 'ts', 'event_type', 'event_action', 'peer_ip', 'peer_port', 'peer_message' ]"
          code => "event.set('[zeek_cols]', @zeek_diagnostic_broker_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate { id => "mutate_add_tag_zeek_diagnostic_broker"
             add_tag => [ "_zeekdiagnostic" ] }

  } else if ([log_source] == "capture_loss") {
    #############################################################################################################################
    # capture_loss.log
    # Reports analysis of missing traffic. Zeek bases its conclusions on analysis of TCP sequence numbers.
    # https://docs.zeek.org/en/master/logs/capture-loss-and-reporter.html

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_diagnostic_capture_loss"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][ts_delta]} %{[zeek_cols][peer]} %{[zeek_cols][gaps]} %{[zeek_cols][acks]} %{[zeek_cols][percent_lost]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_diagnostic_capture_loss"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_diagnostic_capture_loss"
          init => "@zeek_diagnostic_capture_loss_field_names = [ 'ts', 'ts_delta', 'peer', 'gaps', 'acks', 'percent_lost' ]"
          code => "event.set('[zeek_cols]', @zeek_diagnostic_capture_loss_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate { id => "mutate_add_tag_zeek_diagnostic_capture_loss"
             add_tag => [ "_zeekdiagnostic" ] }

  } else if ([log_source] == "cluster") {
    #############################################################################################################################
    # cluster.log
    # Logging for establishing and controlling a cluster of Zeek instances
    # https://docs.zeek.org/en/master/scripts/base/frameworks/cluster/main.zeek.html#type-Cluster::Info

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_cluster_fields"
        rename => { "[zeek_cols][message]" => "[zeek_cols][node_message]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_diagnostic_cluster"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][node]} %{[zeek_cols][node_message]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_diagnostic_cluster"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_diagnostic_cluster"
          init => "@zeek_diagnostic_cluster_field_names = [ 'ts', 'node', 'node_message' ]"
          code => "event.set('[zeek_cols]', @zeek_diagnostic_cluster_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate { id => "mutate_add_tag_zeek_diagnostic_cluster"
             add_tag => [ "_zeekdiagnostic" ] }

  } else if ([log_source] == "config") {
    #############################################################################################################################
    # config.log
    # Logging for Zeek configuration changes
    # https://docs.zeek.org/en/master/scripts/base/frameworks/config/main.zeek.html#type-Config::Info

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_diagnostic_config"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][value_name]} %{[zeek_cols][value_old]} %{[zeek_cols][value_new]} %{[zeek_cols][location]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_diagnostic_config"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_diagnostic_config"
          init => "@zeek_diagnostic_config_field_names = [ 'ts', 'value_name', 'value_old', 'value_new', 'location' ]"
          code => "event.set('[zeek_cols]', @zeek_diagnostic_config_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate { id => "mutate_add_tag_zeek_diagnostic_config"
             add_tag => [ "_zeekdiagnostic" ] }

  } else if ([log_source] == "packet_filter") {
    #############################################################################################################################
    # packet_filter.log
    # https://docs.zeek.org/en/master/scripts/base/frameworks/packet-filter/main.zeek.html#type-PacketFilter::Info

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_diagnostic_packet_filter"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][node]} %{[zeek_cols][filter]} %{[zeek_cols][init]} %{[zeek_cols][success]} %{[zeek_cols][failure_reason]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_diagnostic_packet_filter"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_diagnostic_packet_filter"
          init => "@zeek_diagnostic_packet_filter_field_names = [ 'ts', 'node', 'filter', 'init', 'success', 'failure_reason' ]"
          code => "event.set('[zeek_cols]', @zeek_diagnostic_packet_filter_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate { id => "mutate_add_tag_zeek_diagnostic_packet_filter"
             add_tag => [ "_zeekdiagnostic" ] }

  } else if ([log_source] == "print") {
    #############################################################################################################################
    # print.log
    # https://docs.zeek.org/en/master/scripts/base/frameworks/logging/main.zeek.html#type-Log::PrintLogInfo

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_diagnostic_print"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][vals]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_diagnostic_print"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_diagnostic_print"
          init => "@zeek_diagnostic_print_field_names = [ 'ts', 'vals' ]"
          code => "event.set('[zeek_cols]', @zeek_diagnostic_print_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "split_zeek_diagnostic_print_vals"
               split => { "[zeek_cols][vals]" => "," } }
    }

    mutate { id => "mutate_add_tag_zeek_diagnostic_print"
             add_tag => [ "_zeekdiagnostic" ] }


  } else if ([log_source] == "reporter") {
    #############################################################################################################################
    # reporter.log
    # https://docs.zeek.org/en/master/scripts/base/frameworks/reporter/main.zeek.html#type-Reporter::Info

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_reporter_fields"
        rename => { "[zeek_cols][message]" => "[zeek_cols][msg]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_diagnostic_reporter"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][level]} %{[zeek_cols][msg]} %{[zeek_cols][location]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_diagnostic_reporter"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_diagnostic_reporter"
          init => "@zeek_diagnostic_reporter_field_names = [ 'ts', 'level', 'msg', 'location' ]"
          code => "event.set('[zeek_cols]', @zeek_diagnostic_reporter_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate { id => "mutate_add_tag_zeek_diagnostic_reporter"
             add_tag => [ "_zeekdiagnostic" ] }

  } else if ([log_source] == "stats") {
    #############################################################################################################################
    # stats.log
    # https://docs.zeek.org/en/master/scripts/policy/misc/stats.zeek.html#type-Stats::Info

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_diagnostic_stats"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][peer]} %{[zeek_cols][mem]} %{[zeek_cols][pkts_proc]} %{[zeek_cols][bytes_recv]} %{[zeek_cols][pkts_dropped]} %{[zeek_cols][pkts_link]} %{[zeek_cols][pkt_lag]} %{[zeek_cols][pkts_filtered]} %{[zeek_cols][events_proc]} %{[zeek_cols][events_queued]} %{[zeek_cols][active_tcp_conns]} %{[zeek_cols][active_udp_conns]} %{[zeek_cols][active_icmp_conns]} %{[zeek_cols][tcp_conns]} %{[zeek_cols][udp_conns]} %{[zeek_cols][icmp_conns]} %{[zeek_cols][timers]} %{[zeek_cols][active_timers]} %{[zeek_cols][files]} %{[zeek_cols][active_files]} %{[zeek_cols][dns_requests]} %{[zeek_cols][active_dns_requests]} %{[zeek_cols][reassem_tcp_size]} %{[zeek_cols][reassem_file_size]} %{[zeek_cols][reassem_frag_size]} %{[zeek_cols][reassem_unknown_size]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_diagnostic_stats"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_diagnostic_stats"
          init => "@zeek_diagnostic_stats_field_names = [ 'ts', 'peer', 'mem', 'pkts_proc', 'bytes_recv', 'pkts_dropped', 'pkts_link', 'pkt_lag', 'pkts_filtered', 'events_proc', 'events_queued', 'active_tcp_conns', 'active_udp_conns', 'active_icmp_conns', 'tcp_conns', 'udp_conns', 'icmp_conns', 'timers', 'active_timers', 'files', 'active_files', 'dns_requests', 'active_dns_requests', 'reassem_tcp_size', 'reassem_file_size', 'reassem_frag_size', 'reassem_unknown_size' ]"
          code => "event.set('[zeek_cols]', @zeek_diagnostic_stats_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate { id => "mutate_add_tag_zeek_diagnostic_stats"
             add_tag => [ "_zeekdiagnostic" ] }

  } else if ([log_source] == "dpd") {
    #############################################################################################################################
    # dpd.log
    # https://docs.zeek.org/en/stable/scripts/base/frameworks/dpd/main.zeek.html#type-DPD::Info

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_dpd_fields"
        rename => { "[zeek_cols][analyzer]" => "[zeek_cols][service]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_dpd"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][service]} %{[zeek_cols][failure_reason]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_dpd"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_dpd"
          init => "@zeek_dpd_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'service', 'failure_reason' ]"
          code => "event.set('[zeek_cols]', @zeek_dpd_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    # normalize service string(s)

    mutate { id => "mutate_lowercase_dpd_service"
             lowercase => [ "[zeek_cols][service]" ] }

    # some services are named like blah_udp/blah_tcp/blah_data, and we don't care about the suffix
    mutate { id => "mutate_gsub_field_zeek_dpd_service_protocol_suffix"
             gsub => [ "[zeek_cols][service]", "[_-](tcp|udp|data)", "" ] }

    # if it's coming from spicy, we don't care to have that in the service name
    mutate { id => "mutate_gsub_field_zeek_dpd_service_spicy_prefix"
             gsub => [ "[zeek_cols][service]", "spicy_", "" ] }

    mutate { id => "mutate_gsub_field_zeek_dpd_service_spicy_cipher_suffix"
             gsub => [ "[zeek_cols][service]", "(_hmac)?(_(sha|md)\d+)?$", "" ] }

  }

} # end Filter
