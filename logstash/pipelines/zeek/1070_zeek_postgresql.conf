########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "postgresql") {
    #############################################################################################################################
    # postgresql.log
    # main.zeek (https://docs.zeek.org/en/master/scripts/base/protocols/postgresql/main.zeek.html)

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_postgresql"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]}  %{[zeek_cols][uid]} %{[zeek_cols][orig_h]}  %{[zeek_cols][orig_p]}  %{[zeek_cols][resp_h]}  %{[zeek_cols][resp_p]}  %{[zeek_cols][user]}  %{[zeek_cols][database]}  %{[zeek_cols][application_name]}  %{[zeek_cols][frontend]}  %{[zeek_cols][frontend_arg]}  %{[zeek_cols][backend]} %{[zeek_cols][backend_arg]} %{[zeek_cols][success]} %{[zeek_cols][rows]}"
        }
      }

      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_postgresql"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_postgresql"
          init => "@zeek_postgresql_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'user', 'database', 'application_name', 'frontend', 'frontend_arg', 'backend', 'backend_arg', 'success', 'rows' ]"
          code => "event.set('[zeek_cols]', @zeek_postgresql_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_postgresql"
      add_field => {
        "[zeek_cols][proto]" => "tcp"
        "[zeek_cols][service]" => "postgresql"
      }
    }

  }

} # end Filter
