########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {

  if ([log_source] == "x509") {
    #############################################################################################################################
    # x509.log
    # https://docs.zeek.org/en/stable/scripts/base/files/x509/main.zeek.html#type-X509::Info

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_x509_fields"
        rename => { "[zeek_cols][certificate.version]" => "[zeek_cols][certificate_version]" }
        rename => { "[zeek_cols][certificate.serial]" => "[zeek_cols][certificate_serial]" }
        rename => { "[zeek_cols][certificate.subject]" => "[zeek_cols][certificate_subject]" }
        rename => { "[zeek_cols][certificate.issuer]" => "[zeek_cols][certificate_issuer]" }
        rename => { "[zeek_cols][certificate.not_valid_before]" => "[zeek_cols][certificate_not_valid_before]" }
        rename => { "[zeek_cols][certificate.not_valid_after]" => "[zeek_cols][certificate_not_valid_after]" }
        rename => { "[zeek_cols][certificate.key_alg]" => "[zeek_cols][certificate_key_alg]" }
        rename => { "[zeek_cols][certificate.sig_alg]" => "[zeek_cols][certificate_sig_alg]" }
        rename => { "[zeek_cols][certificate.key_type]" => "[zeek_cols][certificate_key_type]" }
        rename => { "[zeek_cols][certificate.key_length]" => "[zeek_cols][certificate_key_length]" }
        rename => { "[zeek_cols][certificate.exponent]" => "[zeek_cols][certificate_exponent]" }
        rename => { "[zeek_cols][certificate.curve]" => "[zeek_cols][certificate_curve]" }
        rename => { "[zeek_cols][san.dns]" => "[zeek_cols][san_dns]" }
        rename => { "[zeek_cols][san.uri]" => "[zeek_cols][san_uri]" }
        rename => { "[zeek_cols][san.email]" => "[zeek_cols][san_email]" }
        rename => { "[zeek_cols][san.ip]" => "[zeek_cols][san_ip]" }
        rename => { "[zeek_cols][basic_constraints.ca]" => "[zeek_cols][basic_constraints_ca]" }
        rename => { "[zeek_cols][basic_constraints.path_len]" => "[zeek_cols][basic_constraints_path_len]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_x509_v1"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][fingerprint]} %{[zeek_cols][certificate_version]} %{[zeek_cols][certificate_serial]} %{[zeek_cols][certificate_subject]} %{[zeek_cols][certificate_issuer]} %{[zeek_cols][certificate_not_valid_before]} %{[zeek_cols][certificate_not_valid_after]} %{[zeek_cols][certificate_key_alg]} %{[zeek_cols][certificate_sig_alg]} %{[zeek_cols][certificate_key_type]} %{[zeek_cols][certificate_key_length]} %{[zeek_cols][certificate_exponent]} %{[zeek_cols][certificate_curve]} %{[zeek_cols][san_dns]} %{[zeek_cols][san_uri]} %{[zeek_cols][san_email]} %{[zeek_cols][san_ip]} %{[zeek_cols][basic_constraints_ca]} %{[zeek_cols][basic_constraints_path_len]} %{[zeek_cols][host_cert]} %{[zeek_cols][client_cert]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_x509"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_x509"
          init => "@zeek_x509_field_names = [ 'ts', 'fuid', 'certificate_version', 'certificate_serial', 'certificate_subject', 'certificate_issuer', 'certificate_not_valid_before', 'certificate_not_valid_after', 'certificate_key_alg', 'certificate_sig_alg', 'certificate_key_type', 'certificate_key_length', 'certificate_exponent', 'certificate_curve', 'san_dns', 'san_uri', 'san_email', 'san_ip', 'basic_constraints_ca', 'basic_constraints_path_len', 'host_cert', 'client_cert' ]"
          code => "event.set('[zeek_cols]', @zeek_x509_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_x509_san_ip"
               split => { "[zeek_cols][san_ip]" => ","
                          "[zeek_cols][fingerprint]" => "," } }
    }

    mutate { id => "mutate_add_fields_zeek_x509"
             add_field => { "[zeek_cols][service]" => "X.509" } }

  }

} # end Filter
