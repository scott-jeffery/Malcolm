########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "websocket") {
    #############################################################################################################################
    # websocket.log
    # https://docs.zeek.org/en/master/scripts/base/protocols/websocket/main.zeek.html#type-WebSocket::Info

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_websocket"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][host]} %{[zeek_cols][uri]} %{[zeek_cols][user_agent]} %{[zeek_cols][subprotocol]} %{[zeek_cols][client_protocols]} %{[zeek_cols][server_extensions]} %{[zeek_cols][client_extensions]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_websocket"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_websocket"
          init => "@zeek_websocket_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'host', 'uri', 'user_agent', 'subprotocol', 'client_protocols', 'server_extensions', 'client_extensions' ]"
          code => "event.set('[zeek_cols]', @zeek_websocket_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    # split some vector fields (on , and ;) a few fields and trim spaces
    ruby {
      id => "ruby_websocket_split_and_clean"
      code => "
        if (client_protocols = event.get('[zeek_cols][client_protocols]')) then
          client_protocols = client_protocols.split(/[,;]/)
          client_protocols.collect{ |e| e ? e.strip : e }
          event.set('[zeek_cols][client_protocols]', client_protocols)
        end
        if (server_extensions = event.get('[zeek_cols][server_extensions]')) then
          server_extensions = server_extensions.split(/[,;]/)
          server_extensions.collect{ |e| e ? e.strip : e }
          event.set('[zeek_cols][server_extensions]', server_extensions)
        end
        if (client_extensions = event.get('[zeek_cols][client_extensions]')) then
          client_extensions = client_extensions.split(/[,;]/)
          client_extensions.collect{ |e| e ? e.strip : e }
          event.set('[zeek_cols][client_extensions]', client_extensions)
        end
      "
    }

    mutate {
      id => "mutate_add_field_zeek_service_websocket"
      add_field =>  {
        "[zeek_cols][proto]" => "tcp"
        "[zeek_cols][service]" => "websocket"
      }
    }
  }

} # end Filter
