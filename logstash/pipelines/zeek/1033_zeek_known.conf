########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "known_certs") {
    #############################################################################################################################
    # known_certs.log
    # https://docs.zeek.org/en/stable/scripts/policy/protocols/ssl/known-certs.zeek.html#type-Known::CertsInfo

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_known_certs_fields"
        rename => { "[zeek_cols][host]" => "[zeek_cols][orig_h]" }
        rename => { "[zeek_cols][port_num]" => "[zeek_cols][orig_p]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_known_certs"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][subject]} %{[zeek_cols][issuer_subject]} %{[zeek_cols][serial]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_known_certs"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_known_certs"
          init => "@zeek_known_certs_field_names = [ 'ts', 'orig_h', 'orig_p', 'subject', 'resp_h', 'issuer_subject', 'serial' ]"
          code => "event.set('[zeek_cols]', @zeek_known_certs_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_known_certs"
      add_field => {
        "[zeek_cols][proto]" => "tcp"
        "[zeek_cols][service]" => "tls"
      }
    }

  } else if ([log_source] == "known_hosts") {
    #############################################################################################################################
    # known_hosts.log
    # https://docs.zeek.org/en/stable/scripts/policy/protocols/conn/known-hosts.zeek.html#type-Known::HostsInfo

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_known_hosts_fields"
        rename => { "[zeek_cols][host]" => "[zeek_cols][orig_h]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_known_hosts"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][orig_h]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_known_hosts"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_known_hosts"
          init => "@zeek_known_hosts_field_names = [ 'ts', 'orig_h' ]"
          code => "event.set('[zeek_cols]', @zeek_known_hosts_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

  } else if ([log_source] == "known_modbus") {
    #############################################################################################################################
    # known_modbus.log
    # https://docs.zeek.org/en/stable/scripts/policy/protocols/modbus/known-masters-slaves.zeek.html#type-Known::ModbusInfo

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_known_modbus_fields"
        rename => { "[zeek_cols][host]" => "[zeek_cols][orig_h]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_known_modbus"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][orig_h]} %{[zeek_cols][device_type]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_known_modbus"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_known_modbus"
          init => "@zeek_known_modbus_field_names = [ 'ts', 'orig_h', 'device_type' ]"
          code => "event.set('[zeek_cols]', @zeek_known_modbus_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate { id => "mutate_gsub_zeek_known_modbus_device_type"
             gsub => [ "[zeek_cols][device_type]", "Known::", "" ] }

    mutate { id => "mutate_gsub_zeek_known_modbus_master"
             gsub => [ "[zeek_cols][device_type]", "MASTER", "CLIENT" ] }

    mutate { id => "mutate_gsub_zeek_known_modbus_slave"
             gsub => [ "[zeek_cols][device_type]", "SLAVE", "SERVER" ] }

    mutate { id => "mutate_add_tag_ics_known_modbus_log"
             add_tag => [ "ics" ] }

  } else if ([log_source] == "known_routers") {
    #############################################################################################################################
    # known_routers.log

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_known_routers"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_l2_addr]} %{[zeek_cols][ttl]} %{[zeek_cols][hlim]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_known_routers"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_known_routers"
          init => "@zeek_known_routers_field_names = [ 'ts', 'orig_h', 'orig_l2_addr', 'ttl', 'hlim' ]"
          code => "event.set('[zeek_cols]', @zeek_known_routers_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

  } else if ([log_source] == "known_services") {
    #############################################################################################################################
    # known_services.log
    # https://docs.zeek.org/en/stable/scripts/policy/protocols/conn/known-services.zeek.html#type-Known::ServicesInfo

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_known_services_fields"
        rename => { "[zeek_cols][host]" => "[zeek_cols][resp_h]" }
        rename => { "[zeek_cols][port_num]" => "[zeek_cols][resp_p]" }
        rename => { "[zeek_cols][port_proto]" => "[zeek_cols][proto]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_known_services"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][service]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_known_services"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_known_services"
          init => "@zeek_known_services_field_names = [ 'ts', 'resp_h', 'resp_p', 'proto', 'service' ]"
          code => "event.set('[zeek_cols]', @zeek_known_services_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    # normalize service string(s)

    mutate { id => "mutate_lowercase_zeek_known_services_service"
             lowercase => [ "[zeek_cols][service]" ] }

    # some services are named like blah_udp/blah_tcp/blah_data, and we don't care about the suffix
    mutate { id => "mutate_gsub_field_zeek_known_services_service_suffix"
             gsub => [ "[zeek_cols][service]", "[_-](tcp|udp|data)", "" ] }

    # if it's coming from spicy, we don't care to have that in the service name
    mutate { id => "mutate_gsub_field_zeek_known_services_spicy_prefix"
             gsub => [ "[zeek_cols][service]", "spicy_", "" ] }

    mutate { id => "mutate_gsub_field_zeek_known_services_spicy_cipher_suffix"
             gsub => [ "[zeek_cols][service]", "(_hmac)?(_(sha|md)\d+)?$", "" ] }

  }

} # end Filter
