########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "software") {
    #############################################################################################################################
    # software.log
    # https://docs.zeek.org/en/stable/scripts/base/frameworks/software/main.zeek.html#type-Software::Info

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_software_fields"
        rename => { "[zeek_cols][host]" => "[zeek_cols][orig_h]" }
        rename => { "[zeek_cols][host_p]" => "[zeek_cols][orig_p]" }
        rename => { "[zeek_cols][version.major]" => "[zeek_cols][version_major]" }
        rename => { "[zeek_cols][version.minor]" => "[zeek_cols][version_minor]" }
        rename => { "[zeek_cols][version.minor2]" => "[zeek_cols][version_minor2]" }
        rename => { "[zeek_cols][version.minor3]" => "[zeek_cols][version_minor3]" }
        rename => { "[zeek_cols][version.addl]" => "[zeek_cols][version_addl]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_software"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][software_type]} %{[zeek_cols][name]} %{[zeek_cols][version_major]} %{[zeek_cols][version_minor]} %{[zeek_cols][version_minor2]} %{[zeek_cols][version_minor3]} %{[zeek_cols][version_addl]} %{[zeek_cols][unparsed_version]} %{[zeek_cols][url]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_software"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_software"
          init => "@zeek_software_field_names = [ 'ts', 'orig_h', 'orig_p', 'software_type', 'name', 'version_major', 'version_minor', 'version_minor2', 'version_minor3', 'version_addl', 'unparsed_version', 'url' ]"
          code => "event.set('[zeek_cols]', @zeek_software_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

  }

} # end Filter
