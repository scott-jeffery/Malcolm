########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "ipsec") {
    #############################################################################################################################
    # ipsec.log
    # https://github.com/corelight/zeek-spicy-ipsec/blob/master/analyzer/main.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_ipsec"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][initiator_spi]} %{[zeek_cols][responder_spi]} %{[zeek_cols][maj_ver]} %{[zeek_cols][min_ver]} %{[zeek_cols][exchange_type]} %{[zeek_cols][flag_e]} %{[zeek_cols][flag_c]} %{[zeek_cols][flag_a]} %{[zeek_cols][flag_i]} %{[zeek_cols][flag_v]} %{[zeek_cols][flag_r]} %{[zeek_cols][message_id]} %{[zeek_cols][vendor_ids]} %{[zeek_cols][notify_messages]} %{[zeek_cols][transforms]} %{[zeek_cols][ke_dh_groups]} %{[zeek_cols][proposals]} %{[zeek_cols][protocol_id]} %{[zeek_cols][certificates]} %{[zeek_cols][transform_attributes]} %{[zeek_cols][length]} %{[zeek_cols][hash]} %{[zeek_cols][doi]} %{[zeek_cols][situation]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ipsec"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_ipsec"
          init => "@zeek_ipsec_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'is_orig', 'initiator_spi', 'responder_spi', 'maj_ver', 'min_ver', 'exchange_type', 'flag_e', 'flag_c', 'flag_a', 'flag_i', 'flag_v', 'flag_r', 'message_id', 'vendor_ids', 'notify_messages', 'transforms', 'ke_dh_groups', 'proposals', 'protocol_id', 'certificates', 'transform_attributes', 'length', 'hash', 'doi', 'situation' ]"
          code => "event.set('[zeek_cols]', @zeek_ipsec_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_ipsec_commas"
               split => { "[zeek_cols][vendor_ids]" => ","
                          "[zeek_cols][notify_messages]" => ","
                          "[zeek_cols][transforms]" => ","
                          "[zeek_cols][ke_dh_groups]" => ","
                          "[zeek_cols][proposals]" => ","
                          "[zeek_cols][certificates]" => ","
                          "[zeek_cols][transform_attributes]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_ipsec"
      add_field => {
        "[zeek_cols][service]" => "ipsec"
      }
    }

  }

} # end Filter
