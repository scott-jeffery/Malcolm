########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "ospf") {
    #############################################################################################################################
    # ospf.log
    # https://github.com/corelight/zeek-spicy-ospf

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_ospf_fields"
        rename => { "[zeek_cols][ip_dst]" => "[zeek_cols][orig_h]" }
        rename => { "[zeek_cols][ip_src]" => "[zeek_cols][resp_h]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_ospf"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][orig_h]} %{[zeek_cols][resp_h]} %{[zeek_cols][ospf_type]} %{[zeek_cols][version]} %{[zeek_cols][router_id]} %{[zeek_cols][area_id]} %{[zeek_cols][interface_id]} %{[zeek_cols][netmask]} %{[zeek_cols][desig_router]} %{[zeek_cols][backup_router]} %{[zeek_cols][neighbors]} %{[zeek_cols][lsa_type]} %{[zeek_cols][link_state_id]} %{[zeek_cols][advert_router]} %{[zeek_cols][routers]} %{[zeek_cols][link_id]} %{[zeek_cols][link_data]} %{[zeek_cols][link_type]} %{[zeek_cols][neighbor_router_id]} %{[zeek_cols][metrics]} %{[zeek_cols][fwd_addrs]} %{[zeek_cols][route_tags]} %{[zeek_cols][neighbor_interface_id]} %{[zeek_cols][prefix]} %{[zeek_cols][metric]} %{[zeek_cols][dest_router_id]} %{[zeek_cols][link_prefixes]} %{[zeek_cols][intra_prefixes]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_ospf"
          split => { "[message]" => " " }
        }

        ruby {
          id => "ruby_zip_zeek_ospf"
          init => "@zeek_ospf_field_names = [ 'ts', 'orig_h', 'resp_h', 'ospf_type', 'version', 'router_id', 'area_id', 'interface_id', 'netmask', 'desig_router', 'backup_router', 'neighbors', 'lsa_type', 'link_state_id', 'advert_router', 'routers', 'link_id', 'link_data', 'link_type', 'neighbor_router_id', 'metrics', 'fwd_addrs', 'route_tags', 'neighbor_interface_id', 'prefix', 'metric', 'dest_router_id', 'link_prefixes', 'intra_prefixes' ]"
          code => "event.set('[zeek_cols]', @zeek_ospf_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_ospf_commas"
               split => { "[zeek_cols][neighbors]" => ","
                          "[zeek_cols][routers]" => ","
                          "[zeek_cols][metrics]" => ","
                          "[zeek_cols][fwd_addrs]" => ","
                          "[zeek_cols][route_tags]" => ","
                          "[zeek_cols][link_prefixes]" => ","
                          "[zeek_cols][intra_prefixes]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_ospf"
      add_field => {
        "[zeek_cols][proto]" => "ospf"
        "[zeek_cols][service]" => "ospf"
      }
    }

  }

} # end Filter
