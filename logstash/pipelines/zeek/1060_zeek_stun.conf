########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "stun") {
    #############################################################################################################################
    # stun.log
    # https://github.com/corelight/zeek-spicy-stun/blob/master/analyzer/main.zeek

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_stun_fields"
        rename => { "[zeek_cols][attr_types]" => "[zeek_cols][attr_type]" }
        rename => { "[zeek_cols][attr_vals]" => "[zeek_cols][attr_val]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_stun"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][is_orig]} %{[zeek_cols][trans_id]} %{[zeek_cols][method]} %{[zeek_cols][class]} %{[zeek_cols][attr_type]} %{[zeek_cols][attr_val]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_stun"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_stun"
          init => "@zeek_stun_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'is_orig', 'trans_id', 'method', 'class', 'attr_type', 'attr_val' ]"
          code => "event.set('[zeek_cols]', @zeek_stun_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_field_zeek_stun_commas"
               split => { "[zeek_cols][attr_type]" => ","
                          "[zeek_cols][attr_val]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_stun"
      add_field => {
        "[zeek_cols][service]" => "stun"
      }
    }

  } else if ([log_source] == "stun_nat") {
    #############################################################################################################################
    # stun.log
    # https://github.com/corelight/zeek-spicy-stun/blob/master/analyzer/main.zeek

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_stun_nat_fields"
        rename => { "[zeek_cols][wan_addrs]" => "[zeek_cols][wan_addr]" }
        rename => { "[zeek_cols][wan_ports]" => "[zeek_cols][wan_port]" }
        rename => { "[zeek_cols][lan_addrs]" => "[zeek_cols][lan_addr]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_stun_nat"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][is_orig]} %{[zeek_cols][wan_addr]} %{[zeek_cols][wan_port]} %{[zeek_cols][lan_addr]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_stun_nat"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_stun_nat"
          init => "@zeek_stun_nat_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'is_orig', 'wan_addr', 'wan_port', 'lan_addr' ]"
          code => "event.set('[zeek_cols]', @zeek_stun_nat_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_field_zeek_stun_nat_commas"
               split => { "[zeek_cols][wan_addrs]" => ","
                          "[zeek_cols][wan_ports]" => ","
                          "[zeek_cols][lan_addrs]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_stun_nat"
      add_field => {
        "[zeek_cols][service]" => "stun"
      }
    }

  }

} # end Filter
