########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "conn") or ([log_source] == "conn_long") {
    #############################################################################################################################
    # conn.log
    #   - https://docs.zeek.org/en/stable/scripts/base/protocols/conn/main.zeek.html#type-Conn::Info
    # conn_long.log
    #   - https://github.com/corelight/zeek-long-connections

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_conn_with_all_fields"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][proto]} %{[zeek_cols][service]} %{[zeek_cols][duration]} %{[zeek_cols][orig_bytes]} %{[zeek_cols][resp_bytes]} %{[zeek_cols][conn_state]} %{[zeek_cols][local_orig]} %{[zeek_cols][local_resp]} %{[zeek_cols][missed_bytes]} %{[zeek_cols][history]} %{[zeek_cols][orig_pkts]} %{[zeek_cols][orig_ip_bytes]} %{[zeek_cols][resp_pkts]} %{[zeek_cols][resp_ip_bytes]} %{[zeek_cols][tunnel_parents]} %{[zeek_cols][ip_proto]} %{[zeek_cols][vlan]} %{[zeek_cols][inner_vlan]} %{[zeek_cols][orig_l2_addr]} %{[zeek_cols][resp_l2_addr]} %{[zeek_cols][community_id]} %{[zeek_cols][ja4l]} %{[zeek_cols][ja4ls]} %{[zeek_cols][ja4t]} %{[zeek_cols][ja4ts]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_conn"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_conn"
          init => "@zeek_conn_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'proto', 'service', 'duration', 'orig_bytes', 'resp_bytes', 'conn_state', 'local_orig', 'local_resp', 'missed_bytes', 'history', 'orig_pkts', 'orig_ip_bytes', 'resp_pkts', 'resp_ip_bytes', 'tunnel_parents', 'ip_proto', 'vlan', 'inner_vlan', 'orig_l2_addr', 'resp_l2_addr', 'community_id', 'ja4l', 'ja4ls', 'ja4t', 'ja4ts' ]"
          code => "event.set('[zeek_cols]', @zeek_conn_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    # normalize service string(s)

    mutate { id => "mutate_lowercase_conn_service"
             lowercase => [ "[zeek_cols][service]" ] }

    # For some reason, even in JSON, I have service strings like:
    #   ...,"proto":"udp","service":"profinet,profinet_dce_rpc,spicy_profinet_io_cm,profinet",...
    # so whatever reason it's not already an array. Split it here.
    mutate { id => "mutate_split_zeek_conn_commas"
             split => { "[zeek_cols][service]" => "," } }

    # some services are named like blah_udp/blah_tcp/blah_data, and we don't care about the suffix
    mutate { id => "mutate_gsub_field_zeek_conn_service_protocol_suffix"
             gsub => [ "[zeek_cols][service]", "[_-](tcp|udp|data)", "" ] }

    # if it's coming from spicy, we don't care to have that in the service name
    mutate { id => "mutate_gsub_field_zeek_conn_service_spicy_prefix"
             gsub => [ "[zeek_cols][service]", "spicy_", "" ] }

    mutate { id => "mutate_gsub_field_zeek_conn_service_spicy_cipher_suffix"
             gsub => [ "[zeek_cols][service]", "(_hmac)?(_(sha|md)\d+)?$", "" ] }

    if ([zeek_cols][orig_ip_bytes]) and ([zeek_cols][orig_ip_bytes] != '-') and ([zeek_cols][orig_ip_bytes] != '(empty)') and ([zeek_cols][orig_ip_bytes] != '') {
      mutate { id => "mutate_add_field_zeek_srcBytes"
               add_field => { "[source][bytes]" => "%{[zeek_cols][orig_ip_bytes]}" } }
    }
    if ([zeek_cols][resp_ip_bytes]) and ([zeek_cols][resp_ip_bytes] != '-') and ([zeek_cols][resp_ip_bytes] != '(empty)') and ([zeek_cols][resp_ip_bytes] != '') {
      mutate { id => "mutate_add_field_zeek_dstBytes"
               add_field => { "[destination][bytes]" => "%{[zeek_cols][resp_ip_bytes]}" } }
    }
    if ([zeek_cols][orig_pkts]) and ([zeek_cols][orig_pkts] != '-') and ([zeek_cols][orig_pkts] != '(empty)') and ([zeek_cols][orig_pkts] != '') {
      mutate { id => "mutate_add_field_zeek_srcPackets"
               add_field => { "[source][packets]" => "%{[zeek_cols][orig_pkts]}" } }
    }
    if ([zeek_cols][orig_bytes]) and ([zeek_cols][orig_bytes] != '-') and ([zeek_cols][orig_bytes] != '(empty)') and ([zeek_cols][orig_bytes] != '') {
      mutate { id => "mutate_add_field_zeek_srcDataBytes"
               add_field => { "[client][bytes]" => "%{[zeek_cols][orig_bytes]}" } }
    }
    if ([zeek_cols][resp_pkts]) and ([zeek_cols][resp_pkts] != '-') and ([zeek_cols][resp_pkts] != '(empty)') and ([zeek_cols][resp_pkts] != '') {
      mutate { id => "mutate_add_field_zeek_dstPackets"
               add_field => { "[destination][packets]" => "%{[zeek_cols][resp_pkts]}" } }
    }
    if ([zeek_cols][resp_bytes]) and ([zeek_cols][resp_bytes] != '-') and ([zeek_cols][resp_bytes] != '(empty)') and ([zeek_cols][resp_bytes] != '') {
      mutate { id => "mutate_add_field_zeek_dstDataBytes"
               add_field => { "[server][bytes]" => "%{[zeek_cols][resp_bytes]}" } }
    }
    if ([zeek_cols][tunnel_parents]) and ([zeek_cols][tunnel_parents] != '(empty)') and ([zeek_cols][tunnel_parents] != '-') and ([zeek_cols][tunnel_parents] != '') {
      if ("_jsonparsesuccess" not in [tags]) { mutate { id => "mutate_split_zeek_tunnel_parents"
                                                        split => { "[zeek_cols][tunnel_parents]" => "," } } }
      mutate { id => "mutate_add_field_zeek_conn_rootId"
               add_field => { "[rootId]" => "%{[zeek_cols][tunnel_parents][0]}" } }
    }
    mutate { id => "mutate_rename_conn_ip_proto"
             rename => { "[zeek_cols][ip_proto]" => "[ipProtocol]" } }

    if ([log_source] == "conn_long") {
      mutate { id => "mutate_add_zeek_conn_long"
               add_field => { "[zeek_cols][long]" => "true" } }
      mutate { id => "mutate_replace_conn_long_conn"
               replace => { "[log_source]" => "conn" } }
    }

  }

} # end Filter
