########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "modbus") {
    #############################################################################################################################
    # modbus.log
    # https://docs.zeek.org/en/stable/scripts/base/protocols/modbus/main.zeek.html#type-Modbus::Info

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_modbus"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][trans_id]} %{[zeek_cols][unit_id]} %{[zeek_cols][func]} %{[zeek_cols][network_direction]} %{[zeek_cols][exception]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_modbus"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_modbus"
          init => "@zeek_modbus_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'trans_id', 'unit_id', 'func', 'network_direction', 'exception' ]"
          code => "event.set('[zeek_cols]', @zeek_modbus_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_modbus"
      add_field =>  { "[zeek_cols][service]" => "modbus" }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "modbus_detailed") {
    #############################################################################################################################
    # modbus_detailed.log
    # main.zeek (https://github.com/cisagov/icsnpp-modbus)

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_modbus_detailed_fields"
        rename => { "[zeek_cols][tid]" => "[zeek_cols][trans_id]" }
        rename => { "[zeek_cols][unit]" => "[zeek_cols][unit_id]" }
        rename => { "[zeek_cols][request_response]" => "[zeek_cols][network_direction]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_modbus_detailed"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][trans_id]} %{[zeek_cols][unit_id]} %{[zeek_cols][func]} %{[zeek_cols][network_direction]} %{[zeek_cols][address]} %{[zeek_cols][quantity]} %{[zeek_cols][values]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_modbus_detailed"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_modbus_detailed"
          init => "@zeek_modbus_detailed_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'trans_id', 'unit_id', 'func', 'network_direction', 'address', 'quantity', 'values' ]"
          code => "event.set('[zeek_cols]', @zeek_modbus_detailed_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_modbus_detailed_values"
               split => { "[zeek_cols][values]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_modbus_detailed"
      add_field => {
        "[zeek_cols][service]" => "modbus"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "modbus_mask_write_register") {
    #############################################################################################################################
    # modbus_mask_write_register.log
    # main.zeek (https://github.com/cisagov/icsnpp-modbus)

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_modbus_mask_write_register_fields"
        rename => { "[zeek_cols][tid]" => "[zeek_cols][trans_id]" }
        rename => { "[zeek_cols][unit]" => "[zeek_cols][unit_id]" }
        rename => { "[zeek_cols][request_response]" => "[zeek_cols][network_direction]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_modbus_mask_write_register"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][trans_id]} %{[zeek_cols][unit_id]} %{[zeek_cols][func]} %{[zeek_cols][network_direction]} %{[zeek_cols][address]} %{[zeek_cols][and_mask]} %{[zeek_cols][or_mask]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_modbus_mask_write_register"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_modbus_mask_write_register"
          init => "@zeek_modbus_mask_write_register_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'trans_id', 'unit_id', 'func', 'network_direction', 'address', 'and_mask', 'or_mask' ]"
          code => "event.set('[zeek_cols]', @zeek_modbus_mask_write_register_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_modbus_mask_write_register"
      add_field => {
        "[zeek_cols][service]" => "modbus"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "modbus_read_device_identification") {
    #############################################################################################################################
    # modbus_read_device_identification.log
    # main.zeek (https://github.com/cisagov/icsnpp-modbus)

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_modbus_read_device_identification_fields"
        rename => { "[zeek_cols][tid]" => "[zeek_cols][trans_id]" }
        rename => { "[zeek_cols][unit]" => "[zeek_cols][unit_id]" }
        rename => { "[zeek_cols][request_response]" => "[zeek_cols][network_direction]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_modbus_read_device_identification"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][trans_id]} %{[zeek_cols][unit_id]} %{[zeek_cols][func]} %{[zeek_cols][network_direction]} %{[zeek_cols][mei_type]} %{[zeek_cols][conformity_level_code]} %{[zeek_cols][conformity_level]} %{[zeek_cols][device_id_code]} %{[zeek_cols][object_id_code]} %{[zeek_cols][object_id]} %{[zeek_cols][object_value]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_modbus_read_device_identification"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_modbus_read_device_identification"
          init => "@zeek_modbus_read_device_identification_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'trans_id', 'unit_id', 'func', 'network_direction', 'mei_type', 'conformity_level_code', 'conformity_level', 'device_id_code', 'object_id_code', 'object_id', 'object_value' ]"
          code => "event.set('[zeek_cols]', @zeek_modbus_read_device_identification_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate {
      id => "mutate_add_fields_zeek_modbus_read_device_identification"
      add_field => {
        "[zeek_cols][service]" => "modbus"
      }
      add_tag => [ "ics" ]
    }

  } else if ([log_source] == "modbus_read_write_multiple_registers") {
    #############################################################################################################################
    # modbus_read_write_multiple_registers.log
    # main.zeek (https://github.com/cisagov/icsnpp-modbus)

    if ("_jsonparsesuccess" in [tags]) {
      mutate {
        id => "mutate_rename_zeek_json_modbus_read_write_multiple_registers_fields"
        rename => { "[zeek_cols][tid]" => "[zeek_cols][trans_id]" }
        rename => { "[zeek_cols][unit]" => "[zeek_cols][unit_id]" }
        rename => { "[zeek_cols][request_response]" => "[zeek_cols][network_direction]" }
      }

    } else {
      dissect {
        id => "dissect_zeek_modbus_read_write_multiple_registers"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][trans_id]} %{[zeek_cols][unit_id]} %{[zeek_cols][func]} %{[zeek_cols][network_direction]} %{[zeek_cols][write_start_address]} %{[zeek_cols][write_registers]} %{[zeek_cols][read_start_address]} %{[zeek_cols][read_quantity]} %{[zeek_cols][read_registers]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_modbus_read_write_multiple_registers"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_modbus_read_write_multiple_registers"
          init => "@zeek_modbus_read_write_multiple_registers_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'trans_id', 'unit_id', 'func', 'network_direction', 'write_start_address', 'write_registers', 'read_start_address', 'read_quantity', 'read_registers' ]"
          code => "event.set('[zeek_cols]', @zeek_modbus_read_write_multiple_registers_field_names.zip(event.get('[message]')).to_h)"
        }
      }
      mutate { id => "mutate_split_zeek_modbus_read_write_multiple_registers_read_commas"
               split => { "[zeek_cols][read_registers]" => ","
                          "[zeek_cols][write_registers]" => "," } }
    }

    mutate {
      id => "mutate_add_fields_zeek_modbus_read_write_multiple_registers"
      add_field => {
        "[zeek_cols][service]" => "modbus"
      }
      add_tag => [ "ics" ]
    }

  }

} # end Filter
