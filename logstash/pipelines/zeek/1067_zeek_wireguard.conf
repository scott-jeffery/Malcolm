########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {


  if ([log_source] == "wireguard") {
    #############################################################################################################################
    # wireguard.log
    # https://github.com/corelight/zeek-spicy-wireguard/blob/master/analyzer/main.zeek

    if ("_jsonparsesuccess" not in [tags]) {
      dissect {
        id => "dissect_zeek_wireguard"
        mapping => {
          "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][established]} %{[zeek_cols][initiations]} %{[zeek_cols][responses]}"
        }
      }
      if ("_dissectfailure" in [tags]) {
        mutate {
          id => "mutate_split_zeek_wireguard"
          split => { "[message]" => " " }
        }
        ruby {
          id => "ruby_zip_zeek_wireguard"
          init => "@zeek_wireguard_field_names = [ 'ts', 'uid', 'orig_h', 'orig_p', 'resp_h', 'resp_p', 'established', 'initiations', 'responses' ]"
          code => "event.set('[zeek_cols]', @zeek_wireguard_field_names.zip(event.get('[message]')).to_h)"
        }
      }
    }

    mutate { id => "mutate_gsub_zeek_wireguard_packet_type"
             gsub => [ "[zeek_cols][packet_type]", "Wireguard::WG_", "" ] }

    mutate {
      id => "mutate_add_field_zeek_service_wireguard"
      add_field =>  {
        "[zeek_cols][proto]" => "udp"
        "[zeek_cols][service]" => "wireguard"
      }
    }
  }

} # end Filter
